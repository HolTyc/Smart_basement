
/tmp/arduino/sketches/9D04FCCC6137AEED724C9ADB20BF3B06/sketch_aug18a.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__ctors_end>
   4:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
   8:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
   c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  10:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  24:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  30:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  40:	0c 94 ff 03 	jmp	0x7fe	; 0x7fe <__vector_16>
  44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  48:	0c 94 33 03 	jmp	0x666	; 0x666 <__vector_18>
  4c:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__vector_19>
  50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  54:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  58:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  5c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  60:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  64:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
  68:	00 00       	nop
  6a:	00 09       	sbc	r16, r0
  6c:	00 03       	mulsu	r16, r16
  6e:	02 00       	.word	0x0002	; ????
  70:	00 04       	cpc	r0, r0
  72:	05 08       	sbc	r0, r5
	...

0000007f <digital_pin_to_bit_mask_PGM>:
  7f:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8f:	04 08 10 20 40 80 40                                ... @.@

00000096 <digital_pin_to_port_PGM>:
  96:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a6:	03 03 03 03 02 02 03                                .......

000000ad <port_to_input_PGM>:
  ad:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000b7 <port_to_output_PGM>:
  b7:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000c1 <port_to_mode_PGM>:
  c1:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000cc <__ctors_start>:
__ctors_start():
  cc:	e0 00       	.word	0x00e0	; ????
  ce:	95 03       	fmuls	r17, r21

000000d0 <__ctors_end>:
__dtors_end():
  d0:	11 24       	eor	r1, r1
  d2:	1f be       	out	0x3f, r1	; 63
  d4:	cf ef       	ldi	r28, 0xFF	; 255
  d6:	d8 e0       	ldi	r29, 0x08	; 8
  d8:	de bf       	out	0x3e, r29	; 62
  da:	cd bf       	out	0x3d, r28	; 61

000000dc <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
  dc:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
  de:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
  e0:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
  e2:	ea ed       	ldi	r30, 0xDA	; 218
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
  e4:	ff e0       	ldi	r31, 0x0F	; 15
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
  e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
  e8:	05 90       	lpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
  ea:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
  ec:	a2 31       	cpi	r26, 0x12	; 18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
  ee:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
  f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0xc>

000000f2 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
  f2:	21 e0       	ldi	r18, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
  f4:	a2 e1       	ldi	r26, 0x12	; 18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
  f6:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
  f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
  fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
  fc:	ab 3c       	cpi	r26, 0xCB	; 203
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
  fe:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
 100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>

00000102 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
 102:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
 104:	c8 e6       	ldi	r28, 0x68	; 104
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
 106:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
 108:	04 c0       	rjmp	.+8      	; 0x112 <__do_global_ctors+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
 10a:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
 10c:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
 10e:	0e 94 e5 07 	call	0xfca	; 0xfca <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
 112:	c6 36       	cpi	r28, 0x66	; 102
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
 114:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
 116:	c9 f7       	brne	.-14     	; 0x10a <__do_global_ctors+0x8>
 118:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <main>
 11c:	0c 94 eb 07 	jmp	0xfd6	; 0xfd6 <_exit>

00000120 <__bad_interrupt>:
__vector_22():
 120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <setup>:
setup():
/tmp/.arduinoIDE-unsaved2023718-94803-1e0teog.kj3k/sketch_aug18a/sketch_aug18a.ino:17
// inicializace DHT senzoru s nastaveným pinem a typem senzoru
DHT mojeDHT(pinDHT, typDHT22);

void setup() {
  // komunikace přes sériovou linku rychlostí 9600 baud
  pinMode(8,OUTPUT);
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	88 e0       	ldi	r24, 0x08	; 8
 128:	0e 94 0f 05 	call	0xa1e	; 0xa1e <pinMode>
/tmp/.arduinoIDE-unsaved2023718-94803-1e0teog.kj3k/sketch_aug18a/sketch_aug18a.ino:18
  pinMode(7,OUTPUT);
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	87 e0       	ldi	r24, 0x07	; 7
 130:	0e 94 0f 05 	call	0xa1e	; 0xa1e <pinMode>
/tmp/.arduinoIDE-unsaved2023718-94803-1e0teog.kj3k/sketch_aug18a/sketch_aug18a.ino:20
  // zapnutí komunikace s teploměrem DHT
  mojeDHT.begin();
 134:	67 e3       	ldi	r22, 0x37	; 55
 136:	82 e1       	ldi	r24, 0x12	; 18
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0c 94 08 01 	jmp	0x210	; 0x210 <DHT::begin(unsigned char)>

0000013e <loop>:
loop():
/tmp/.arduinoIDE-unsaved2023718-94803-1e0teog.kj3k/sketch_aug18a/sketch_aug18a.ino:23
}

void loop() {
 13e:	8f 92       	push	r8
 140:	9f 92       	push	r9
 142:	af 92       	push	r10
 144:	bf 92       	push	r11
 146:	cf 92       	push	r12
 148:	df 92       	push	r13
 14a:	ef 92       	push	r14
 14c:	ff 92       	push	r15
/tmp/.arduinoIDE-unsaved2023718-94803-1e0teog.kj3k/sketch_aug18a/sketch_aug18a.ino:27
  // pomocí funkcí readTemperature a readHumidity načteme
  // do proměnných tep a vlh informace o teplotě a vlhkosti,
  // čtení trvá cca 250 ms
  float tep = mojeDHT.readTemperature();
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	82 e1       	ldi	r24, 0x12	; 18
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <DHT::readTemperature(bool, bool)>
 15a:	4b 01       	movw	r8, r22
 15c:	5c 01       	movw	r10, r24
/tmp/.arduinoIDE-unsaved2023718-94803-1e0teog.kj3k/sketch_aug18a/sketch_aug18a.ino:28
  float vlh = mojeDHT.readHumidity();
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	82 e1       	ldi	r24, 0x12	; 18
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <DHT::readHumidity(bool)>
 168:	6b 01       	movw	r12, r22
 16a:	7c 01       	movw	r14, r24
/tmp/.arduinoIDE-unsaved2023718-94803-1e0teog.kj3k/sketch_aug18a/sketch_aug18a.ino:30
  // kontrola, jestli jsou načtené hodnoty čísla pomocí funkce isnan
  if (tep>=27.5) {
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	4c ed       	ldi	r20, 0xDC	; 220
 172:	51 e4       	ldi	r21, 0x41	; 65
 174:	c5 01       	movw	r24, r10
 176:	b4 01       	movw	r22, r8
 178:	0e 94 73 07 	call	0xee6	; 0xee6 <__gesf2>
/tmp/.arduinoIDE-unsaved2023718-94803-1e0teog.kj3k/sketch_aug18a/sketch_aug18a.ino:31
    digitalWrite(8,HIGH);
 17c:	61 e0       	ldi	r22, 0x01	; 1
/tmp/.arduinoIDE-unsaved2023718-94803-1e0teog.kj3k/sketch_aug18a/sketch_aug18a.ino:30
  // do proměnných tep a vlh informace o teplotě a vlhkosti,
  // čtení trvá cca 250 ms
  float tep = mojeDHT.readTemperature();
  float vlh = mojeDHT.readHumidity();
  // kontrola, jestli jsou načtené hodnoty čísla pomocí funkce isnan
  if (tep>=27.5) {
 17e:	87 fd       	sbrc	r24, 7
/tmp/.arduinoIDE-unsaved2023718-94803-1e0teog.kj3k/sketch_aug18a/sketch_aug18a.ino:33
    digitalWrite(8,HIGH);
  } else {
    digitalWrite(8,LOW);
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	88 e0       	ldi	r24, 0x08	; 8
 184:	0e 94 4b 05 	call	0xa96	; 0xa96 <digitalWrite>
/tmp/.arduinoIDE-unsaved2023718-94803-1e0teog.kj3k/sketch_aug18a/sketch_aug18a.ino:35
  }
  if (vlh>=58) {
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	48 e6       	ldi	r20, 0x68	; 104
 18e:	52 e4       	ldi	r21, 0x42	; 66
 190:	c7 01       	movw	r24, r14
 192:	b6 01       	movw	r22, r12
 194:	0e 94 73 07 	call	0xee6	; 0xee6 <__gesf2>
/tmp/.arduinoIDE-unsaved2023718-94803-1e0teog.kj3k/sketch_aug18a/sketch_aug18a.ino:36
    digitalWrite(7,HIGH);
 198:	61 e0       	ldi	r22, 0x01	; 1
/tmp/.arduinoIDE-unsaved2023718-94803-1e0teog.kj3k/sketch_aug18a/sketch_aug18a.ino:35
  if (tep>=27.5) {
    digitalWrite(8,HIGH);
  } else {
    digitalWrite(8,LOW);
  }
  if (vlh>=58) {
 19a:	87 fd       	sbrc	r24, 7
/tmp/.arduinoIDE-unsaved2023718-94803-1e0teog.kj3k/sketch_aug18a/sketch_aug18a.ino:38
    digitalWrite(7,HIGH);
  } else {
    digitalWrite(7,LOW);
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	87 e0       	ldi	r24, 0x07	; 7
 1a0:	0e 94 4b 05 	call	0xa96	; 0xa96 <digitalWrite>
/tmp/.arduinoIDE-unsaved2023718-94803-1e0teog.kj3k/sketch_aug18a/sketch_aug18a.ino:41
  }
  // pauza pro přehlednější výpis
  delay(10);
 1a4:	6a e0       	ldi	r22, 0x0A	; 10
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
/tmp/.arduinoIDE-unsaved2023718-94803-1e0teog.kj3k/sketch_aug18a/sketch_aug18a.ino:42
 1ac:	ff 90       	pop	r15
 1ae:	ef 90       	pop	r14
 1b0:	df 90       	pop	r13
 1b2:	cf 90       	pop	r12
 1b4:	bf 90       	pop	r11
 1b6:	af 90       	pop	r10
 1b8:	9f 90       	pop	r9
 1ba:	8f 90       	pop	r8
/tmp/.arduinoIDE-unsaved2023718-94803-1e0teog.kj3k/sketch_aug18a/sketch_aug18a.ino:41
    digitalWrite(7,HIGH);
  } else {
    digitalWrite(7,LOW);
  }
  // pauza pro přehlednější výpis
  delay(10);
 1bc:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <delay>

000001c0 <_GLOBAL__sub_I_mojeDHT>:
_GLOBAL__sub_I_mojeDHT():
/tmp/.arduinoIDE-unsaved2023718-94803-1e0teog.kj3k/sketch_aug18a/sketch_aug18a.ino:13
// odkomentování správného typu čidla
#define typDHT22 DHT22     // DHT 11
//#define typDHT22 DHT22   // DHT 22 (AM2302)

// inicializace DHT senzoru s nastaveným pinem a typem senzoru
DHT mojeDHT(pinDHT, typDHT22);
 1c0:	26 e0       	ldi	r18, 0x06	; 6
 1c2:	46 e1       	ldi	r20, 0x16	; 22
 1c4:	65 e0       	ldi	r22, 0x05	; 5
 1c6:	82 e1       	ldi	r24, 0x12	; 18
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <DHT::DHT(unsigned char, unsigned char, unsigned char)>

000001ce <DHT::DHT(unsigned char, unsigned char, unsigned char)>:
_ZN3DHTC2Ehhh():
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:216
    if ((percentHumidity < 13) && (temperature >= 80.0) &&
        (temperature <= 112.0))
      hi -= ((13.0 - percentHumidity) * 0.25) *
            sqrt((17.0 - abs(temperature - 95.0)) * 0.05882);

    else if ((percentHumidity > 85.0) && (temperature >= 80.0) &&
 1ce:	dc 01       	movw	r26, r24
 1d0:	15 96       	adiw	r26, 0x05	; 5
 1d2:	6c 93       	st	X, r22
 1d4:	15 97       	sbiw	r26, 0x05	; 5
 1d6:	16 96       	adiw	r26, 0x06	; 6
 1d8:	4c 93       	st	X, r20
 1da:	16 97       	sbiw	r26, 0x06	; 6
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	fb 01       	movw	r30, r22
 1e0:	e1 58       	subi	r30, 0x81	; 129
 1e2:	ff 4f       	sbci	r31, 0xFF	; 255
 1e4:	e4 91       	lpm	r30, Z
 1e6:	17 96       	adiw	r26, 0x07	; 7
 1e8:	ec 93       	st	X, r30
 1ea:	17 97       	sbiw	r26, 0x07	; 7
 1ec:	6a 56       	subi	r22, 0x6A	; 106
 1ee:	7f 4f       	sbci	r23, 0xFF	; 255
 1f0:	fb 01       	movw	r30, r22
 1f2:	64 91       	lpm	r22, Z
 1f4:	18 96       	adiw	r26, 0x08	; 8
 1f6:	6c 93       	st	X, r22
 1f8:	18 97       	sbiw	r26, 0x08	; 8
 1fa:	40 e8       	ldi	r20, 0x80	; 128
 1fc:	5e e3       	ldi	r21, 0x3E	; 62
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	1d 96       	adiw	r26, 0x0d	; 13
 204:	4d 93       	st	X+, r20
 206:	5d 93       	st	X+, r21
 208:	6d 93       	st	X+, r22
 20a:	7c 93       	st	X, r23
 20c:	50 97       	sbiw	r26, 0x10	; 16
 20e:	08 95       	ret

00000210 <DHT::begin(unsigned char)>:
_ZN3DHT5beginEh():
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	ec 01       	movw	r28, r24
 218:	16 2f       	mov	r17, r22
 21a:	62 e0       	ldi	r22, 0x02	; 2
 21c:	8d 81       	ldd	r24, Y+5	; 0x05
 21e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <pinMode>
 222:	0e 94 49 04 	call	0x892	; 0x892 <millis>
 226:	60 5d       	subi	r22, 0xD0	; 208
 228:	77 40       	sbci	r23, 0x07	; 7
 22a:	81 09       	sbc	r24, r1
 22c:	91 09       	sbc	r25, r1
 22e:	69 87       	std	Y+9, r22	; 0x09
 230:	7a 87       	std	Y+10, r23	; 0x0a
 232:	8b 87       	std	Y+11, r24	; 0x0b
 234:	9c 87       	std	Y+12, r25	; 0x0c
 236:	1a 8b       	std	Y+18, r17	; 0x12
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	1f 91       	pop	r17
 23e:	08 95       	ret

00000240 <DHT::expectPulse(bool)>:
_ZN3DHT11expectPulseEb():
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:362
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
 240:	cf 92       	push	r12
 242:	df 92       	push	r13
 244:	ef 92       	push	r14
 246:	ff 92       	push	r15
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	dc 01       	movw	r26, r24
 24e:	17 96       	adiw	r26, 0x07	; 7
 250:	cc 91       	ld	r28, X
 252:	17 97       	sbiw	r26, 0x07	; 7
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:373
  uint16_t count = 0; // To work fast enough on slower AVR boards
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
 254:	d0 e0       	ldi	r29, 0x00	; 0
 256:	61 11       	cpse	r22, r1
 258:	dc 2f       	mov	r29, r28
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:374 (discriminator 4)
  while ((*portInputRegister(_port) & _bit) == portState) {
 25a:	18 96       	adiw	r26, 0x08	; 8
 25c:	2c 91       	ld	r18, X
 25e:	18 97       	sbiw	r26, 0x08	; 8
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	22 0f       	add	r18, r18
 264:	33 1f       	adc	r19, r19
 266:	23 55       	subi	r18, 0x53	; 83
 268:	3f 4f       	sbci	r19, 0xFF	; 255
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:368 (discriminator 4)
// F_CPU is not be known at compile time on platforms such as STM32F103.
// The preprocessor seems to evaluate it to zero in that case.
#if (F_CPU > 16000000L) || (F_CPU == 0L)
  uint32_t count = 0;
#else
  uint16_t count = 0; // To work fast enough on slower AVR boards
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	40 e0       	ldi	r20, 0x00	; 0
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:374
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
  while ((*portInputRegister(_port) & _bit) == portState) {
 26e:	f9 01       	movw	r30, r18
 270:	85 91       	lpm	r24, Z+
 272:	94 91       	lpm	r25, Z
 274:	fc 01       	movw	r30, r24
 276:	f0 80       	ld	r15, Z
 278:	ba 01       	movw	r22, r20
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	ef 2d       	mov	r30, r15
 280:	ec 23       	and	r30, r28
 282:	ed 13       	cpse	r30, r29
 284:	10 c0       	rjmp	.+32     	; 0x2a6 <DHT::expectPulse(bool)+0x66>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:375
    if (count++ >= _maxcycles) {
 286:	4f 5f       	subi	r20, 0xFF	; 255
 288:	5f 4f       	sbci	r21, 0xFF	; 255
 28a:	1d 96       	adiw	r26, 0x0d	; 13
 28c:	cd 90       	ld	r12, X+
 28e:	dd 90       	ld	r13, X+
 290:	ed 90       	ld	r14, X+
 292:	fc 90       	ld	r15, X
 294:	50 97       	sbiw	r26, 0x10	; 16
 296:	6c 15       	cp	r22, r12
 298:	7d 05       	cpc	r23, r13
 29a:	8e 05       	cpc	r24, r14
 29c:	9f 05       	cpc	r25, r15
 29e:	38 f3       	brcs	.-50     	; 0x26e <DHT::expectPulse(bool)+0x2e>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:376
      return TIMEOUT; // Exceeded timeout, fail.
 2a0:	6f ef       	ldi	r22, 0xFF	; 255
 2a2:	7f ef       	ldi	r23, 0xFF	; 255
 2a4:	cb 01       	movw	r24, r22
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:390
    }
  }
#endif

  return count;
}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	ff 90       	pop	r15
 2ac:	ef 90       	pop	r14
 2ae:	df 90       	pop	r13
 2b0:	cf 90       	pop	r12
 2b2:	08 95       	ret

000002b4 <DHT::read(bool)>:
_ZN3DHT4readEb():
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:231
 *seconds.
 *  @param  force
 *          true if using force mode
 *	@return float value
 */
bool DHT::read(bool force) {
 2b4:	8f 92       	push	r8
 2b6:	9f 92       	push	r9
 2b8:	af 92       	push	r10
 2ba:	bf 92       	push	r11
 2bc:	cf 92       	push	r12
 2be:	df 92       	push	r13
 2c0:	ef 92       	push	r14
 2c2:	ff 92       	push	r15
 2c4:	0f 93       	push	r16
 2c6:	1f 93       	push	r17
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	cd b7       	in	r28, 0x3d	; 61
 2ce:	de b7       	in	r29, 0x3e	; 62
 2d0:	c0 54       	subi	r28, 0x40	; 64
 2d2:	d1 40       	sbci	r29, 0x01	; 1
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	f8 94       	cli
 2d8:	de bf       	out	0x3e, r29	; 62
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	cd bf       	out	0x3d, r28	; 61
 2de:	8c 01       	movw	r16, r24
 2e0:	f6 2e       	mov	r15, r22
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:234
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
 2e2:	0e 94 49 04 	call	0x892	; 0x892 <millis>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:235
  if (!force && ((currenttime - _lastreadtime) < MIN_INTERVAL)) {
 2e6:	f1 10       	cpse	r15, r1
 2e8:	29 c0       	rjmp	.+82     	; 0x33c <DHT::read(bool)+0x88>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:235 (discriminator 1)
 2ea:	f8 01       	movw	r30, r16
 2ec:	c1 84       	ldd	r12, Z+9	; 0x09
 2ee:	d2 84       	ldd	r13, Z+10	; 0x0a
 2f0:	e3 84       	ldd	r14, Z+11	; 0x0b
 2f2:	f4 84       	ldd	r15, Z+12	; 0x0c
 2f4:	9b 01       	movw	r18, r22
 2f6:	ac 01       	movw	r20, r24
 2f8:	2c 19       	sub	r18, r12
 2fa:	3d 09       	sbc	r19, r13
 2fc:	4e 09       	sbc	r20, r14
 2fe:	5f 09       	sbc	r21, r15
 300:	69 01       	movw	r12, r18
 302:	7a 01       	movw	r14, r20
 304:	30 ed       	ldi	r19, 0xD0	; 208
 306:	c3 16       	cp	r12, r19
 308:	37 e0       	ldi	r19, 0x07	; 7
 30a:	d3 06       	cpc	r13, r19
 30c:	e1 04       	cpc	r14, r1
 30e:	f1 04       	cpc	r15, r1
 310:	a8 f4       	brcc	.+42     	; 0x33c <DHT::read(bool)+0x88>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:236
    return _lastresult; // return last correct measurement
 312:	81 89       	ldd	r24, Z+17	; 0x11
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:353
  } else {
    DEBUG_PRINTLN(F("DHT checksum failure!"));
    _lastresult = false;
    return _lastresult;
  }
}
 314:	c0 5c       	subi	r28, 0xC0	; 192
 316:	de 4f       	sbci	r29, 0xFE	; 254
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	f8 94       	cli
 31c:	de bf       	out	0x3e, r29	; 62
 31e:	0f be       	out	0x3f, r0	; 63
 320:	cd bf       	out	0x3d, r28	; 61
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	1f 91       	pop	r17
 328:	0f 91       	pop	r16
 32a:	ff 90       	pop	r15
 32c:	ef 90       	pop	r14
 32e:	df 90       	pop	r13
 330:	cf 90       	pop	r12
 332:	bf 90       	pop	r11
 334:	af 90       	pop	r10
 336:	9f 90       	pop	r9
 338:	8f 90       	pop	r8
 33a:	08 95       	ret
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:238
  // to use last reading.
  uint32_t currenttime = millis();
  if (!force && ((currenttime - _lastreadtime) < MIN_INTERVAL)) {
    return _lastresult; // return last correct measurement
  }
  _lastreadtime = currenttime;
 33c:	f8 01       	movw	r30, r16
 33e:	61 87       	std	Z+9, r22	; 0x09
 340:	72 87       	std	Z+10, r23	; 0x0a
 342:	83 87       	std	Z+11, r24	; 0x0b
 344:	94 87       	std	Z+12, r25	; 0x0c
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:241

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
 346:	14 82       	std	Z+4, r1	; 0x04
 348:	13 82       	std	Z+3, r1	; 0x03
 34a:	12 82       	std	Z+2, r1	; 0x02
 34c:	11 82       	std	Z+1, r1	; 0x01
 34e:	10 82       	st	Z, r1
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:252
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  pinMode(_pin, INPUT_PULLUP);
 350:	62 e0       	ldi	r22, 0x02	; 2
 352:	85 81       	ldd	r24, Z+5	; 0x05
 354:	0e 94 0f 05 	call	0xa1e	; 0xa1e <pinMode>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:253
  delay(1);
 358:	61 e0       	ldi	r22, 0x01	; 1
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <delay>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:256

  // First set data line low for a period according to sensor type
  pinMode(_pin, OUTPUT);
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	f8 01       	movw	r30, r16
 368:	85 81       	ldd	r24, Z+5	; 0x05
 36a:	0e 94 0f 05 	call	0xa1e	; 0xa1e <pinMode>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:257
  digitalWrite(_pin, LOW);
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	f8 01       	movw	r30, r16
 372:	85 81       	ldd	r24, Z+5	; 0x05
 374:	0e 94 4b 05 	call	0xa96	; 0xa96 <digitalWrite>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:258
  switch (_type) {
 378:	f8 01       	movw	r30, r16
 37a:	86 81       	ldd	r24, Z+6	; 0x06
 37c:	85 51       	subi	r24, 0x15	; 21
 37e:	82 30       	cpi	r24, 0x02	; 2
 380:	e8 f4       	brcc	.+58     	; 0x3bc <DHT::read(bool)+0x108>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:261
  case DHT22:
  case DHT21:
    delayMicroseconds(1100); // data sheet says "at least 1ms"
 382:	8c e4       	ldi	r24, 0x4C	; 76
 384:	94 e0       	ldi	r25, 0x04	; 4
 386:	0e 94 b3 04 	call	0x966	; 0x966 <delayMicroseconds>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:272
  }

  uint32_t cycles[80];
  {
    // End the start signal by setting data line high for 40 microseconds.
    pinMode(_pin, INPUT_PULLUP);
 38a:	62 e0       	ldi	r22, 0x02	; 2
 38c:	f8 01       	movw	r30, r16
 38e:	85 81       	ldd	r24, Z+5	; 0x05
 390:	0e 94 0f 05 	call	0xa1e	; 0xa1e <pinMode>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:275

    // Delay a moment to let sensor pull data line low.
    delayMicroseconds(pullTime);
 394:	f8 01       	movw	r30, r16
 396:	82 89       	ldd	r24, Z+18	; 0x12
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 b3 04 	call	0x966	; 0x966 <delayMicroseconds>
_ZN13InterruptLockC4Ev():
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.h:99
 */
class InterruptLock {
public:
  InterruptLock() {
#if !defined(ARDUINO_ARCH_NRF52)
    noInterrupts();
 39e:	f8 94       	cli
_ZN3DHT4readEb():
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:285
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == TIMEOUT) {
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	c8 01       	movw	r24, r16
 3a4:	0e 94 20 01 	call	0x240	; 0x240 <DHT::expectPulse(bool)>
 3a8:	6f 3f       	cpi	r22, 0xFF	; 255
 3aa:	7f 4f       	sbci	r23, 0xFF	; 255
 3ac:	8f 4f       	sbci	r24, 0xFF	; 255
 3ae:	9f 4f       	sbci	r25, 0xFF	; 255
 3b0:	61 f4       	brne	.+24     	; 0x3ca <DHT::read(bool)+0x116>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:287
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal low pulse."));
      _lastresult = false;
 3b2:	f8 01       	movw	r30, r16
 3b4:	11 8a       	std	Z+17, r1	; 0x11
_ZN13InterruptLockD4Ev():
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.h:104
#endif
  }
  ~InterruptLock() {
#if !defined(ARDUINO_ARCH_NRF52)
    interrupts();
 3b6:	78 94       	sei
_ZN3DHT4readEb():
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:318
    uint32_t lowCycles = cycles[2 * i];
    uint32_t highCycles = cycles[2 * i + 1];
    if ((lowCycles == TIMEOUT) || (highCycles == TIMEOUT)) {
      DEBUG_PRINTLN(F("DHT timeout waiting for pulse."));
      _lastresult = false;
      return _lastresult;
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	ac cf       	rjmp	.-168    	; 0x314 <DHT::read(bool)+0x60>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:265
  case DHT21:
    delayMicroseconds(1100); // data sheet says "at least 1ms"
    break;
  case DHT11:
  default:
    delay(20); // data sheet says at least 18ms, 20ms just to be safe
 3bc:	64 e1       	ldi	r22, 0x14	; 20
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <delay>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:266
    break;
 3c8:	e0 cf       	rjmp	.-64     	; 0x38a <DHT::read(bool)+0xd6>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:290
    if (expectPulse(LOW) == TIMEOUT) {
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal low pulse."));
      _lastresult = false;
      return _lastresult;
    }
    if (expectPulse(HIGH) == TIMEOUT) {
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	c8 01       	movw	r24, r16
 3ce:	0e 94 20 01 	call	0x240	; 0x240 <DHT::expectPulse(bool)>
 3d2:	6f 3f       	cpi	r22, 0xFF	; 255
 3d4:	7f 4f       	sbci	r23, 0xFF	; 255
 3d6:	8f 4f       	sbci	r24, 0xFF	; 255
 3d8:	9f 4f       	sbci	r25, 0xFF	; 255
 3da:	59 f3       	breq	.-42     	; 0x3b2 <DHT::read(bool)+0xfe>
 3dc:	9e 01       	movw	r18, r28
 3de:	2f 5f       	subi	r18, 0xFF	; 255
 3e0:	3f 4f       	sbci	r19, 0xFF	; 255
 3e2:	79 01       	movw	r14, r18
 3e4:	5e 01       	movw	r10, r28
 3e6:	3f eb       	ldi	r19, 0xBF	; 191
 3e8:	a3 1a       	sub	r10, r19
 3ea:	3e ef       	ldi	r19, 0xFE	; 254
 3ec:	b3 0a       	sbc	r11, r19
 3ee:	67 01       	movw	r12, r14
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:305 (discriminator 2)
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
      cycles[i] = expectPulse(LOW);
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	c8 01       	movw	r24, r16
 3f4:	0e 94 20 01 	call	0x240	; 0x240 <DHT::expectPulse(bool)>
 3f8:	f6 01       	movw	r30, r12
 3fa:	60 83       	st	Z, r22
 3fc:	71 83       	std	Z+1, r23	; 0x01
 3fe:	82 83       	std	Z+2, r24	; 0x02
 400:	93 83       	std	Z+3, r25	; 0x03
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:306 (discriminator 2)
      cycles[i + 1] = expectPulse(HIGH);
 402:	61 e0       	ldi	r22, 0x01	; 1
 404:	c8 01       	movw	r24, r16
 406:	0e 94 20 01 	call	0x240	; 0x240 <DHT::expectPulse(bool)>
 40a:	f6 01       	movw	r30, r12
 40c:	64 83       	std	Z+4, r22	; 0x04
 40e:	75 83       	std	Z+5, r23	; 0x05
 410:	86 83       	std	Z+6, r24	; 0x06
 412:	97 83       	std	Z+7, r25	; 0x07
 414:	f8 e0       	ldi	r31, 0x08	; 8
 416:	cf 0e       	add	r12, r31
 418:	d1 1c       	adc	r13, r1
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:304 (discriminator 2)
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
 41a:	ca 14       	cp	r12, r10
 41c:	db 04       	cpc	r13, r11
 41e:	41 f7       	brne	.-48     	; 0x3f0 <DHT::read(bool)+0x13c>
_ZN13InterruptLockD4Ev():
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.h:104
 420:	78 94       	sei
_ZN3DHT4readEb():
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:312
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	20 e0       	ldi	r18, 0x00	; 0
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:313
    uint32_t lowCycles = cycles[2 * i];
 426:	f7 01       	movw	r30, r14
 428:	80 80       	ld	r8, Z
 42a:	91 80       	ldd	r9, Z+1	; 0x01
 42c:	a2 80       	ldd	r10, Z+2	; 0x02
 42e:	b3 80       	ldd	r11, Z+3	; 0x03
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:314
    uint32_t highCycles = cycles[2 * i + 1];
 430:	44 81       	ldd	r20, Z+4	; 0x04
 432:	55 81       	ldd	r21, Z+5	; 0x05
 434:	66 81       	ldd	r22, Z+6	; 0x06
 436:	77 81       	ldd	r23, Z+7	; 0x07
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:315
    if ((lowCycles == TIMEOUT) || (highCycles == TIMEOUT)) {
 438:	ff ef       	ldi	r31, 0xFF	; 255
 43a:	8f 16       	cp	r8, r31
 43c:	9f 06       	cpc	r9, r31
 43e:	af 06       	cpc	r10, r31
 440:	bf 06       	cpc	r11, r31
 442:	31 f0       	breq	.+12     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:315 (discriminator 1)
 444:	4f 3f       	cpi	r20, 0xFF	; 255
 446:	8f ef       	ldi	r24, 0xFF	; 255
 448:	58 07       	cpc	r21, r24
 44a:	68 07       	cpc	r22, r24
 44c:	78 07       	cpc	r23, r24
 44e:	19 f4       	brne	.+6      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:317
      DEBUG_PRINTLN(F("DHT timeout waiting for pulse."));
      _lastresult = false;
 450:	f8 01       	movw	r30, r16
 452:	11 8a       	std	Z+17, r1	; 0x11
 454:	b1 cf       	rjmp	.-158    	; 0x3b8 <DHT::read(bool)+0x104>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:320
      return _lastresult;
    }
    data[i / 8] <<= 1;
 456:	f9 01       	movw	r30, r18
 458:	83 e0       	ldi	r24, 0x03	; 3
 45a:	f5 95       	asr	r31
 45c:	e7 95       	ror	r30
 45e:	8a 95       	dec	r24
 460:	e1 f7       	brne	.-8      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 462:	e0 0f       	add	r30, r16
 464:	f1 1f       	adc	r31, r17
 466:	80 81       	ld	r24, Z
 468:	88 0f       	add	r24, r24
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:322
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
 46a:	84 16       	cp	r8, r20
 46c:	95 06       	cpc	r9, r21
 46e:	a6 06       	cpc	r10, r22
 470:	b7 06       	cpc	r11, r23
 472:	f0 f0       	brcs	.+60     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:324
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i / 8] |= 1;
 474:	80 83       	st	Z, r24
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:312
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
 476:	2f 5f       	subi	r18, 0xFF	; 255
 478:	3f 4f       	sbci	r19, 0xFF	; 255
 47a:	f8 e0       	ldi	r31, 0x08	; 8
 47c:	ef 0e       	add	r14, r31
 47e:	f1 1c       	adc	r15, r1
 480:	28 32       	cpi	r18, 0x28	; 40
 482:	31 05       	cpc	r19, r1
 484:	81 f6       	brne	.-96     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:345
  DEBUG_PRINT(data[4], HEX);
  DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
 486:	f8 01       	movw	r30, r16
 488:	44 81       	ldd	r20, Z+4	; 0x04
 48a:	20 81       	ld	r18, Z
 48c:	81 81       	ldd	r24, Z+1	; 0x01
 48e:	28 0f       	add	r18, r24
 490:	33 27       	eor	r19, r19
 492:	33 1f       	adc	r19, r19
 494:	82 81       	ldd	r24, Z+2	; 0x02
 496:	28 0f       	add	r18, r24
 498:	31 1d       	adc	r19, r1
 49a:	83 81       	ldd	r24, Z+3	; 0x03
 49c:	82 0f       	add	r24, r18
 49e:	93 2f       	mov	r25, r19
 4a0:	91 1d       	adc	r25, r1
 4a2:	99 27       	eor	r25, r25
 4a4:	48 17       	cp	r20, r24
 4a6:	19 06       	cpc	r1, r25
 4a8:	99 f6       	brne	.-90     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:346
    _lastresult = true;
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	81 8b       	std	Z+17, r24	; 0x11
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:347
    return _lastresult;
 4ae:	32 cf       	rjmp	.-412    	; 0x314 <DHT::read(bool)+0x60>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:324
    }
    data[i / 8] <<= 1;
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i / 8] |= 1;
 4b0:	81 60       	ori	r24, 0x01	; 1
 4b2:	e0 cf       	rjmp	.-64     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>

000004b4 <DHT::readTemperature(bool, bool)>:
_ZN3DHT15readTemperatureEbb():
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:85
 *					- false = Celcius
 *  @param  force
 *          true if in force mode
 *	@return Temperature value in selected scale
 */
float DHT::readTemperature(bool S, bool force) {
 4b4:	cf 92       	push	r12
 4b6:	df 92       	push	r13
 4b8:	ef 92       	push	r14
 4ba:	ff 92       	push	r15
 4bc:	0f 93       	push	r16
 4be:	1f 93       	push	r17
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
 4c4:	8c 01       	movw	r16, r24
 4c6:	c6 2f       	mov	r28, r22
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:88
  float f = NAN;

  if (read(force)) {
 4c8:	64 2f       	mov	r22, r20
 4ca:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <DHT::read(bool)>
 4ce:	88 23       	and	r24, r24
 4d0:	41 f0       	breq	.+16     	; 0x4e2 <DHT::readTemperature(bool, bool)+0x2e>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:89
    switch (_type) {
 4d2:	f8 01       	movw	r30, r16
 4d4:	86 81       	ldd	r24, Z+6	; 0x06
 4d6:	8c 30       	cpi	r24, 0x0C	; 12
 4d8:	09 f4       	brne	.+2      	; 0x4dc <DHT::readTemperature(bool, bool)+0x28>
 4da:	5d c0       	rjmp	.+186    	; 0x596 <DHT::readTemperature(bool, bool)+0xe2>
 4dc:	38 f4       	brcc	.+14     	; 0x4ec <DHT::readTemperature(bool, bool)+0x38>
 4de:	8b 30       	cpi	r24, 0x0B	; 11
 4e0:	e1 f0       	breq	.+56     	; 0x51a <DHT::readTemperature(bool, bool)+0x66>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:86
 *  @param  force
 *          true if in force mode
 *	@return Temperature value in selected scale
 */
float DHT::readTemperature(bool S, bool force) {
  float f = NAN;
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	70 e0       	ldi	r23, 0x00	; 0
 4e6:	80 ec       	ldi	r24, 0xC0	; 192
 4e8:	9f e7       	ldi	r25, 0x7F	; 127
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:123
        f = convertCtoF(f);
      }
      break;
    }
  }
  return f;
 4ea:	4c c0       	rjmp	.+152    	; 0x584 <DHT::readTemperature(bool, bool)+0xd0>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:89
 */
float DHT::readTemperature(bool S, bool force) {
  float f = NAN;

  if (read(force)) {
    switch (_type) {
 4ec:	85 51       	subi	r24, 0x15	; 21
 4ee:	82 30       	cpi	r24, 0x02	; 2
 4f0:	c0 f7       	brcc	.-16     	; 0x4e2 <DHT::readTemperature(bool, bool)+0x2e>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:112
        f = convertCtoF(f);
      }
      break;
    case DHT22:
    case DHT21:
      f = ((word)(data[2] & 0x7F)) << 8 | data[3];
 4f2:	d2 81       	ldd	r29, Z+2	; 0x02
 4f4:	6d 2f       	mov	r22, r29
 4f6:	70 e0       	ldi	r23, 0x00	; 0
 4f8:	76 2f       	mov	r23, r22
 4fa:	66 27       	eor	r22, r22
 4fc:	66 27       	eor	r22, r22
 4fe:	7f 77       	andi	r23, 0x7F	; 127
 500:	83 81       	ldd	r24, Z+3	; 0x03
 502:	68 2b       	or	r22, r24
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	0e 94 c1 06 	call	0xd82	; 0xd82 <__floatunsisf>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:113
      f *= 0.1;
 50c:	2d ec       	ldi	r18, 0xCD	; 205
 50e:	3c ec       	ldi	r19, 0xCC	; 204
 510:	4c ec       	ldi	r20, 0xCC	; 204
 512:	5d e3       	ldi	r21, 0x3D	; 61
 514:	0e 94 78 07 	call	0xef0	; 0xef0 <__mulsf3>
 518:	59 c0       	rjmp	.+178    	; 0x5cc <DHT::readTemperature(bool, bool)+0x118>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:91
  float f = NAN;

  if (read(force)) {
    switch (_type) {
    case DHT11:
      f = data[2];
 51a:	62 81       	ldd	r22, Z+2	; 0x02
 51c:	70 e0       	ldi	r23, 0x00	; 0
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	0e 94 c1 06 	call	0xd82	; 0xd82 <__floatunsisf>
 526:	6b 01       	movw	r12, r22
 528:	7c 01       	movw	r14, r24
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:92
      if (data[3] & 0x80) {
 52a:	f8 01       	movw	r30, r16
 52c:	d3 81       	ldd	r29, Z+3	; 0x03
 52e:	d7 ff       	sbrs	r29, 7
 530:	0a c0       	rjmp	.+20     	; 0x546 <DHT::readTemperature(bool, bool)+0x92>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:93
        f = -1 - f;
 532:	ac 01       	movw	r20, r24
 534:	9b 01       	movw	r18, r22
 536:	60 e0       	ldi	r22, 0x00	; 0
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	80 e8       	ldi	r24, 0x80	; 128
 53c:	9f eb       	ldi	r25, 0xBF	; 191
 53e:	0e 94 54 06 	call	0xca8	; 0xca8 <__subsf3>
 542:	6b 01       	movw	r12, r22
 544:	7c 01       	movw	r14, r24
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:95
      }
      f += (data[3] & 0x0f) * 0.1;
 546:	df 70       	andi	r29, 0x0F	; 15
 548:	6d 2f       	mov	r22, r29
 54a:	70 e0       	ldi	r23, 0x00	; 0
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	0e 94 c3 06 	call	0xd86	; 0xd86 <__floatsisf>
 554:	2d ec       	ldi	r18, 0xCD	; 205
 556:	3c ec       	ldi	r19, 0xCC	; 204
 558:	4c ec       	ldi	r20, 0xCC	; 204
 55a:	5d e3       	ldi	r21, 0x3D	; 61
 55c:	0e 94 78 07 	call	0xef0	; 0xef0 <__mulsf3>
 560:	a7 01       	movw	r20, r14
 562:	96 01       	movw	r18, r12
 564:	0e 94 55 06 	call	0xcaa	; 0xcaa <__addsf3>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:117
      f = ((word)(data[2] & 0x7F)) << 8 | data[3];
      f *= 0.1;
      if (data[2] & 0x80) {
        f *= -1;
      }
      if (S) {
 568:	cc 23       	and	r28, r28
 56a:	61 f0       	breq	.+24     	; 0x584 <DHT::readTemperature(bool, bool)+0xd0>
_ZN3DHT11convertCtoFEf():
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:132
 *  @brief  Converts Celcius to Fahrenheit
 *  @param  c
 *					value in Celcius
 *	@return float value in Fahrenheit
 */
float DHT::convertCtoF(float c) { return c * 1.8 + 32; }
 56c:	26 e6       	ldi	r18, 0x66	; 102
 56e:	36 e6       	ldi	r19, 0x66	; 102
 570:	46 ee       	ldi	r20, 0xE6	; 230
 572:	5f e3       	ldi	r21, 0x3F	; 63
 574:	0e 94 78 07 	call	0xef0	; 0xef0 <__mulsf3>
 578:	20 e0       	ldi	r18, 0x00	; 0
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	40 e0       	ldi	r20, 0x00	; 0
 57e:	52 e4       	ldi	r21, 0x42	; 66
 580:	0e 94 55 06 	call	0xcaa	; 0xcaa <__addsf3>
_ZN3DHT15readTemperatureEbb():
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:124
      }
      break;
    }
  }
  return f;
}
 584:	df 91       	pop	r29
 586:	cf 91       	pop	r28
 588:	1f 91       	pop	r17
 58a:	0f 91       	pop	r16
 58c:	ff 90       	pop	r15
 58e:	ef 90       	pop	r14
 590:	df 90       	pop	r13
 592:	cf 90       	pop	r12
 594:	08 95       	ret
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:101
      if (S) {
        f = convertCtoF(f);
      }
      break;
    case DHT12:
      f = data[2];
 596:	d2 81       	ldd	r29, Z+2	; 0x02
 598:	6d 2f       	mov	r22, r29
 59a:	70 e0       	ldi	r23, 0x00	; 0
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	0e 94 c1 06 	call	0xd82	; 0xd82 <__floatunsisf>
 5a4:	6b 01       	movw	r12, r22
 5a6:	7c 01       	movw	r14, r24
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:102
      f += (data[3] & 0x0f) * 0.1;
 5a8:	f8 01       	movw	r30, r16
 5aa:	63 81       	ldd	r22, Z+3	; 0x03
 5ac:	6f 70       	andi	r22, 0x0F	; 15
 5ae:	70 e0       	ldi	r23, 0x00	; 0
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	0e 94 c3 06 	call	0xd86	; 0xd86 <__floatsisf>
 5b8:	2d ec       	ldi	r18, 0xCD	; 205
 5ba:	3c ec       	ldi	r19, 0xCC	; 204
 5bc:	4c ec       	ldi	r20, 0xCC	; 204
 5be:	5d e3       	ldi	r21, 0x3D	; 61
 5c0:	0e 94 78 07 	call	0xef0	; 0xef0 <__mulsf3>
 5c4:	a7 01       	movw	r20, r14
 5c6:	96 01       	movw	r18, r12
 5c8:	0e 94 55 06 	call	0xcaa	; 0xcaa <__addsf3>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:114
      break;
    case DHT22:
    case DHT21:
      f = ((word)(data[2] & 0x7F)) << 8 | data[3];
      f *= 0.1;
      if (data[2] & 0x80) {
 5cc:	d7 ff       	sbrs	r29, 7
 5ce:	cc cf       	rjmp	.-104    	; 0x568 <DHT::readTemperature(bool, bool)+0xb4>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:115
        f *= -1;
 5d0:	90 58       	subi	r25, 0x80	; 128
 5d2:	ca cf       	rjmp	.-108    	; 0x568 <DHT::readTemperature(bool, bool)+0xb4>

000005d4 <DHT::readHumidity(bool)>:
_ZN3DHT12readHumidityEb():
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:148
 *  @brief  Read Humidity
 *  @param  force
 *					force read mode
 *	@return float value - humidity in percent
 */
float DHT::readHumidity(bool force) {
 5d4:	cf 92       	push	r12
 5d6:	df 92       	push	r13
 5d8:	ef 92       	push	r14
 5da:	ff 92       	push	r15
 5dc:	cf 93       	push	r28
 5de:	df 93       	push	r29
 5e0:	ec 01       	movw	r28, r24
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:150
  float f = NAN;
  if (read(force)) {
 5e2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <DHT::read(bool)>
 5e6:	88 23       	and	r24, r24
 5e8:	41 f0       	breq	.+16     	; 0x5fa <DHT::readHumidity(bool)+0x26>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:151
    switch (_type) {
 5ea:	8e 81       	ldd	r24, Y+6	; 0x06
 5ec:	8b 30       	cpi	r24, 0x0B	; 11
 5ee:	28 f0       	brcs	.+10     	; 0x5fa <DHT::readHumidity(bool)+0x26>
 5f0:	8d 30       	cpi	r24, 0x0D	; 13
 5f2:	40 f0       	brcs	.+16     	; 0x604 <DHT::readHumidity(bool)+0x30>
 5f4:	85 51       	subi	r24, 0x15	; 21
 5f6:	82 30       	cpi	r24, 0x02	; 2
 5f8:	30 f1       	brcs	.+76     	; 0x646 <DHT::readHumidity(bool)+0x72>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:149
 *  @param  force
 *					force read mode
 *	@return float value - humidity in percent
 */
float DHT::readHumidity(bool force) {
  float f = NAN;
 5fa:	60 e0       	ldi	r22, 0x00	; 0
 5fc:	70 e0       	ldi	r23, 0x00	; 0
 5fe:	80 ec       	ldi	r24, 0xC0	; 192
 600:	9f e7       	ldi	r25, 0x7F	; 127
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:163
      f = ((word)data[0]) << 8 | data[1];
      f *= 0.1;
      break;
    }
  }
  return f;
 602:	1a c0       	rjmp	.+52     	; 0x638 <DHT::readHumidity(bool)+0x64>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:154
  float f = NAN;
  if (read(force)) {
    switch (_type) {
    case DHT11:
    case DHT12:
      f = data[0] + data[1] * 0.1;
 604:	69 81       	ldd	r22, Y+1	; 0x01
 606:	70 e0       	ldi	r23, 0x00	; 0
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	0e 94 c3 06 	call	0xd86	; 0xd86 <__floatsisf>
 610:	2d ec       	ldi	r18, 0xCD	; 205
 612:	3c ec       	ldi	r19, 0xCC	; 204
 614:	4c ec       	ldi	r20, 0xCC	; 204
 616:	5d e3       	ldi	r21, 0x3D	; 61
 618:	0e 94 78 07 	call	0xef0	; 0xef0 <__mulsf3>
 61c:	6b 01       	movw	r12, r22
 61e:	7c 01       	movw	r14, r24
 620:	68 81       	ld	r22, Y
 622:	70 e0       	ldi	r23, 0x00	; 0
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	0e 94 c3 06 	call	0xd86	; 0xd86 <__floatsisf>
 62c:	9b 01       	movw	r18, r22
 62e:	ac 01       	movw	r20, r24
 630:	c7 01       	movw	r24, r14
 632:	b6 01       	movw	r22, r12
 634:	0e 94 55 06 	call	0xcaa	; 0xcaa <__addsf3>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:164
      f *= 0.1;
      break;
    }
  }
  return f;
}
 638:	df 91       	pop	r29
 63a:	cf 91       	pop	r28
 63c:	ff 90       	pop	r15
 63e:	ef 90       	pop	r14
 640:	df 90       	pop	r13
 642:	cf 90       	pop	r12
 644:	08 95       	ret
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:158
    case DHT12:
      f = data[0] + data[1] * 0.1;
      break;
    case DHT22:
    case DHT21:
      f = ((word)data[0]) << 8 | data[1];
 646:	68 81       	ld	r22, Y
 648:	79 81       	ldd	r23, Y+1	; 0x01
 64a:	76 27       	eor	r23, r22
 64c:	67 27       	eor	r22, r23
 64e:	76 27       	eor	r23, r22
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	0e 94 c1 06 	call	0xd82	; 0xd82 <__floatunsisf>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:159
      f *= 0.1;
 658:	2d ec       	ldi	r18, 0xCD	; 205
 65a:	3c ec       	ldi	r19, 0xCC	; 204
 65c:	4c ec       	ldi	r20, 0xCC	; 204
 65e:	5d e3       	ldi	r21, 0x3D	; 61
 660:	0e 94 78 07 	call	0xef0	; 0xef0 <__mulsf3>
/home/vakhaib/Arduino/libraries/DHT_sensor_library/DHT.cpp:160
      break;
 664:	e9 cf       	rjmp	.-46     	; 0x638 <DHT::readHumidity(bool)+0x64>

00000666 <__vector_18>:
__vector_18():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 666:	1f 92       	push	r1
 668:	0f 92       	push	r0
 66a:	0f b6       	in	r0, 0x3f	; 63
 66c:	0f 92       	push	r0
 66e:	11 24       	eor	r1, r1
 670:	2f 93       	push	r18
 672:	8f 93       	push	r24
 674:	9f 93       	push	r25
 676:	ef 93       	push	r30
 678:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 67a:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Serial+0x10>
 67e:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Serial+0x11>
 682:	80 81       	ld	r24, Z
 684:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <Serial+0x16>
 688:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <Serial+0x17>
 68c:	82 fd       	sbrc	r24, 2
 68e:	1b c0       	rjmp	.+54     	; 0x6c6 <__vector_18+0x60>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 690:	90 81       	ld	r25, Z
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 692:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <Serial+0x19>
 696:	8f 5f       	subi	r24, 0xFF	; 255
 698:	8f 73       	andi	r24, 0x3F	; 63
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 69a:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <Serial+0x1a>
 69e:	82 17       	cp	r24, r18
 6a0:	41 f0       	breq	.+16     	; 0x6b2 <__vector_18+0x4c>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
 6a2:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <Serial+0x19>
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	eb 5d       	subi	r30, 0xDB	; 219
 6aa:	fe 4f       	sbci	r31, 0xFE	; 254
 6ac:	95 8f       	std	Z+29, r25	; 0x1d
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
 6ae:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <Serial+0x19>
__vector_18():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
 6b2:	ff 91       	pop	r31
 6b4:	ef 91       	pop	r30
 6b6:	9f 91       	pop	r25
 6b8:	8f 91       	pop	r24
 6ba:	2f 91       	pop	r18
 6bc:	0f 90       	pop	r0
 6be:	0f be       	out	0x3f, r0	; 63
 6c0:	0f 90       	pop	r0
 6c2:	1f 90       	pop	r1
 6c4:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 6c6:	80 81       	ld	r24, Z
__vector_18():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
 6c8:	f4 cf       	rjmp	.-24     	; 0x6b2 <__vector_18+0x4c>

000006ca <__vector_19>:
__vector_19():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 6ca:	1f 92       	push	r1
 6cc:	0f 92       	push	r0
 6ce:	0f b6       	in	r0, 0x3f	; 63
 6d0:	0f 92       	push	r0
 6d2:	11 24       	eor	r1, r1
 6d4:	2f 93       	push	r18
 6d6:	3f 93       	push	r19
 6d8:	4f 93       	push	r20
 6da:	5f 93       	push	r21
 6dc:	6f 93       	push	r22
 6de:	7f 93       	push	r23
 6e0:	8f 93       	push	r24
 6e2:	9f 93       	push	r25
 6e4:	af 93       	push	r26
 6e6:	bf 93       	push	r27
 6e8:	ef 93       	push	r30
 6ea:	ff 93       	push	r31
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
 6ec:	85 e2       	ldi	r24, 0x25	; 37
 6ee:	91 e0       	ldi	r25, 0x01	; 1
 6f0:	0e 94 c4 05 	call	0xb88	; 0xb88 <HardwareSerial::_tx_udr_empty_irq()>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
 6f4:	ff 91       	pop	r31
 6f6:	ef 91       	pop	r30
 6f8:	bf 91       	pop	r27
 6fa:	af 91       	pop	r26
 6fc:	9f 91       	pop	r25
 6fe:	8f 91       	pop	r24
 700:	7f 91       	pop	r23
 702:	6f 91       	pop	r22
 704:	5f 91       	pop	r21
 706:	4f 91       	pop	r20
 708:	3f 91       	pop	r19
 70a:	2f 91       	pop	r18
 70c:	0f 90       	pop	r0
 70e:	0f be       	out	0x3f, r0	; 63
 710:	0f 90       	pop	r0
 712:	1f 90       	pop	r1
 714:	18 95       	reti

00000716 <Serial0_available()>:
_Z17Serial0_availablev():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 716:	85 e2       	ldi	r24, 0x25	; 37
 718:	91 e0       	ldi	r25, 0x01	; 1
 71a:	0e 94 79 05 	call	0xaf2	; 0xaf2 <HardwareSerial::available()>
 71e:	21 e0       	ldi	r18, 0x01	; 1
 720:	89 2b       	or	r24, r25
 722:	09 f4       	brne	.+2      	; 0x726 <Serial0_available()+0x10>
 724:	20 e0       	ldi	r18, 0x00	; 0
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
 726:	82 2f       	mov	r24, r18
 728:	08 95       	ret

0000072a <_GLOBAL__sub_I___vector_18>:
_ZN5PrintC4Ev():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 72a:	e5 e2       	ldi	r30, 0x25	; 37
 72c:	f1 e0       	ldi	r31, 0x01	; 1
 72e:	13 82       	std	Z+3, r1	; 0x03
 730:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 732:	88 ee       	ldi	r24, 0xE8	; 232
 734:	93 e0       	ldi	r25, 0x03	; 3
 736:	a0 e0       	ldi	r26, 0x00	; 0
 738:	b0 e0       	ldi	r27, 0x00	; 0
 73a:	84 83       	std	Z+4, r24	; 0x04
 73c:	95 83       	std	Z+5, r25	; 0x05
 73e:	a6 83       	std	Z+6, r26	; 0x06
 740:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 742:	84 e0       	ldi	r24, 0x04	; 4
 744:	91 e0       	ldi	r25, 0x01	; 1
 746:	91 83       	std	Z+1, r25	; 0x01
 748:	80 83       	st	Z, r24
 74a:	85 ec       	ldi	r24, 0xC5	; 197
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	95 87       	std	Z+13, r25	; 0x0d
 750:	84 87       	std	Z+12, r24	; 0x0c
 752:	84 ec       	ldi	r24, 0xC4	; 196
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	97 87       	std	Z+15, r25	; 0x0f
 758:	86 87       	std	Z+14, r24	; 0x0e
 75a:	80 ec       	ldi	r24, 0xC0	; 192
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	91 8b       	std	Z+17, r25	; 0x11
 760:	80 8b       	std	Z+16, r24	; 0x10
 762:	81 ec       	ldi	r24, 0xC1	; 193
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	93 8b       	std	Z+19, r25	; 0x13
 768:	82 8b       	std	Z+18, r24	; 0x12
 76a:	82 ec       	ldi	r24, 0xC2	; 194
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	95 8b       	std	Z+21, r25	; 0x15
 770:	84 8b       	std	Z+20, r24	; 0x14
 772:	86 ec       	ldi	r24, 0xC6	; 198
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	97 8b       	std	Z+23, r25	; 0x17
 778:	86 8b       	std	Z+22, r24	; 0x16
 77a:	11 8e       	std	Z+25, r1	; 0x19
 77c:	12 8e       	std	Z+26, r1	; 0x1a
 77e:	13 8e       	std	Z+27, r1	; 0x1b
 780:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_18():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
 782:	08 95       	ret

00000784 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 784:	af 92       	push	r10
 786:	bf 92       	push	r11
 788:	cf 92       	push	r12
 78a:	df 92       	push	r13
 78c:	ef 92       	push	r14
 78e:	ff 92       	push	r15
 790:	0f 93       	push	r16
 792:	1f 93       	push	r17
 794:	cf 93       	push	r28
 796:	df 93       	push	r29
 798:	6c 01       	movw	r12, r24
 79a:	7b 01       	movw	r14, r22
 79c:	8b 01       	movw	r16, r22
 79e:	04 0f       	add	r16, r20
 7a0:	15 1f       	adc	r17, r21
 7a2:	eb 01       	movw	r28, r22
 7a4:	5e 01       	movw	r10, r28
 7a6:	ae 18       	sub	r10, r14
 7a8:	bf 08       	sbc	r11, r15
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
 7aa:	c0 17       	cp	r28, r16
 7ac:	d1 07       	cpc	r29, r17
 7ae:	59 f0       	breq	.+22     	; 0x7c6 <Print::write(unsigned char const*, unsigned int)+0x42>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
 7b0:	69 91       	ld	r22, Y+
 7b2:	d6 01       	movw	r26, r12
 7b4:	ed 91       	ld	r30, X+
 7b6:	fc 91       	ld	r31, X
 7b8:	01 90       	ld	r0, Z+
 7ba:	f0 81       	ld	r31, Z
 7bc:	e0 2d       	mov	r30, r0
 7be:	c6 01       	movw	r24, r12
 7c0:	09 95       	icall
 7c2:	89 2b       	or	r24, r25
 7c4:	79 f7       	brne	.-34     	; 0x7a4 <Print::write(unsigned char const*, unsigned int)+0x20>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
 7c6:	c5 01       	movw	r24, r10
 7c8:	df 91       	pop	r29
 7ca:	cf 91       	pop	r28
 7cc:	1f 91       	pop	r17
 7ce:	0f 91       	pop	r16
 7d0:	ff 90       	pop	r15
 7d2:	ef 90       	pop	r14
 7d4:	df 90       	pop	r13
 7d6:	cf 90       	pop	r12
 7d8:	bf 90       	pop	r11
 7da:	af 90       	pop	r10
 7dc:	08 95       	ret

000007de <initVariant>:
initVariant():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
 7de:	08 95       	ret

000007e0 <main>:
main():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
 7e0:	0e 94 be 04 	call	0x97c	; 0x97c <init>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:37

  initVariant();
 7e4:	0e 94 ef 03 	call	0x7de	; 0x7de <initVariant>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
 7e8:	0e 94 92 00 	call	0x124	; 0x124 <setup>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
 7ec:	c6 eb       	ldi	r28, 0xB6	; 182
 7ee:	d5 e0       	ldi	r29, 0x05	; 5
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
 7f0:	0e 94 9f 00 	call	0x13e	; 0x13e <loop>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
 7f4:	20 97       	sbiw	r28, 0x00	; 0
 7f6:	e1 f3       	breq	.-8      	; 0x7f0 <main+0x10>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:47 (discriminator 1)
 7f8:	0e 94 b6 05 	call	0xb6c	; 0xb6c <serialEventRun()>
 7fc:	f9 cf       	rjmp	.-14     	; 0x7f0 <main+0x10>

000007fe <__vector_16>:
__vector_16():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 7fe:	1f 92       	push	r1
 800:	0f 92       	push	r0
 802:	0f b6       	in	r0, 0x3f	; 63
 804:	0f 92       	push	r0
 806:	11 24       	eor	r1, r1
 808:	2f 93       	push	r18
 80a:	3f 93       	push	r19
 80c:	8f 93       	push	r24
 80e:	9f 93       	push	r25
 810:	af 93       	push	r26
 812:	bf 93       	push	r27
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
 814:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <timer0_millis>
 818:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <timer0_millis+0x1>
 81c:	a0 91 c9 01 	lds	r26, 0x01C9	; 0x8001c9 <timer0_millis+0x2>
 820:	b0 91 ca 01 	lds	r27, 0x01CA	; 0x8001ca <timer0_millis+0x3>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
 824:	30 91 c6 01 	lds	r19, 0x01C6	; 0x8001c6 <timer0_fract>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
 828:	23 e0       	ldi	r18, 0x03	; 3
 82a:	23 0f       	add	r18, r19
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
 82c:	2d 37       	cpi	r18, 0x7D	; 125
 82e:	68 f1       	brcs	.+90     	; 0x88a <__vector_16+0x8c>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
 830:	26 e8       	ldi	r18, 0x86	; 134
 832:	23 0f       	add	r18, r19
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
 834:	02 96       	adiw	r24, 0x02	; 2
 836:	a1 1d       	adc	r26, r1
 838:	b1 1d       	adc	r27, r1
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
 83a:	20 93 c6 01 	sts	0x01C6, r18	; 0x8001c6 <timer0_fract>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
 83e:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <timer0_millis>
 842:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <timer0_millis+0x1>
 846:	a0 93 c9 01 	sts	0x01C9, r26	; 0x8001c9 <timer0_millis+0x2>
 84a:	b0 93 ca 01 	sts	0x01CA, r27	; 0x8001ca <timer0_millis+0x3>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
 84e:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <timer0_overflow_count>
 852:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <timer0_overflow_count+0x1>
 856:	a0 91 c4 01 	lds	r26, 0x01C4	; 0x8001c4 <timer0_overflow_count+0x2>
 85a:	b0 91 c5 01 	lds	r27, 0x01C5	; 0x8001c5 <timer0_overflow_count+0x3>
 85e:	01 96       	adiw	r24, 0x01	; 1
 860:	a1 1d       	adc	r26, r1
 862:	b1 1d       	adc	r27, r1
 864:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <timer0_overflow_count>
 868:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <timer0_overflow_count+0x1>
 86c:	a0 93 c4 01 	sts	0x01C4, r26	; 0x8001c4 <timer0_overflow_count+0x2>
 870:	b0 93 c5 01 	sts	0x01C5, r27	; 0x8001c5 <timer0_overflow_count+0x3>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:213
#endif
}
 874:	bf 91       	pop	r27
 876:	af 91       	pop	r26
 878:	9f 91       	pop	r25
 87a:	8f 91       	pop	r24
 87c:	3f 91       	pop	r19
 87e:	2f 91       	pop	r18
 880:	0f 90       	pop	r0
 882:	0f be       	out	0x3f, r0	; 63
 884:	0f 90       	pop	r0
 886:	1f 90       	pop	r1
 888:	18 95       	reti
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
 88a:	01 96       	adiw	r24, 0x01	; 1
 88c:	a1 1d       	adc	r26, r1
 88e:	b1 1d       	adc	r27, r1
 890:	d4 cf       	rjmp	.-88     	; 0x83a <__vector_16+0x3c>

00000892 <millis>:
millis():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
 892:	2f b7       	in	r18, 0x3f	; 63
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
 894:	f8 94       	cli
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
 896:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <timer0_millis>
 89a:	70 91 c8 01 	lds	r23, 0x01C8	; 0x8001c8 <timer0_millis+0x1>
 89e:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <timer0_millis+0x2>
 8a2:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <timer0_millis+0x3>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
 8a6:	2f bf       	out	0x3f, r18	; 63
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:227

  return m;
}
 8a8:	08 95       	ret

000008aa <micros>:
micros():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
 8aa:	3f b7       	in	r19, 0x3f	; 63
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
 8ac:	f8 94       	cli
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
 8ae:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <timer0_overflow_count>
 8b2:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <timer0_overflow_count+0x1>
 8b6:	a0 91 c4 01 	lds	r26, 0x01C4	; 0x8001c4 <timer0_overflow_count+0x2>
 8ba:	b0 91 c5 01 	lds	r27, 0x01C5	; 0x8001c5 <timer0_overflow_count+0x3>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
 8be:	26 b5       	in	r18, 0x26	; 38
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
 8c0:	a8 9b       	sbis	0x15, 0	; 21
 8c2:	05 c0       	rjmp	.+10     	; 0x8ce <micros+0x24>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:261 (discriminator 1)
 8c4:	2f 3f       	cpi	r18, 0xFF	; 255
 8c6:	19 f0       	breq	.+6      	; 0x8ce <micros+0x24>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
 8c8:	01 96       	adiw	r24, 0x01	; 1
 8ca:	a1 1d       	adc	r26, r1
 8cc:	b1 1d       	adc	r27, r1
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
 8ce:	3f bf       	out	0x3f, r19	; 63
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
 8d0:	ba 2f       	mov	r27, r26
 8d2:	a9 2f       	mov	r26, r25
 8d4:	98 2f       	mov	r25, r24
 8d6:	88 27       	eor	r24, r24
 8d8:	bc 01       	movw	r22, r24
 8da:	cd 01       	movw	r24, r26
 8dc:	62 0f       	add	r22, r18
 8de:	71 1d       	adc	r23, r1
 8e0:	81 1d       	adc	r24, r1
 8e2:	91 1d       	adc	r25, r1
 8e4:	42 e0       	ldi	r20, 0x02	; 2
 8e6:	66 0f       	add	r22, r22
 8e8:	77 1f       	adc	r23, r23
 8ea:	88 1f       	adc	r24, r24
 8ec:	99 1f       	adc	r25, r25
 8ee:	4a 95       	dec	r20
 8f0:	d1 f7       	brne	.-12     	; 0x8e6 <micros+0x3c>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
 8f2:	08 95       	ret

000008f4 <delay>:
delay():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
 8f4:	8f 92       	push	r8
 8f6:	9f 92       	push	r9
 8f8:	af 92       	push	r10
 8fa:	bf 92       	push	r11
 8fc:	cf 92       	push	r12
 8fe:	df 92       	push	r13
 900:	ef 92       	push	r14
 902:	ff 92       	push	r15
 904:	6b 01       	movw	r12, r22
 906:	7c 01       	movw	r14, r24
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
 908:	0e 94 55 04 	call	0x8aa	; 0x8aa <micros>
 90c:	4b 01       	movw	r8, r22
 90e:	5c 01       	movw	r10, r24
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
 910:	c1 14       	cp	r12, r1
 912:	d1 04       	cpc	r13, r1
 914:	e1 04       	cpc	r14, r1
 916:	f1 04       	cpc	r15, r1
 918:	e9 f0       	breq	.+58     	; 0x954 <__stack+0x55>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:400
    yield();
 91a:	0e 94 53 06 	call	0xca6	; 0xca6 <yield>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
 91e:	0e 94 55 04 	call	0x8aa	; 0x8aa <micros>
 922:	68 19       	sub	r22, r8
 924:	79 09       	sbc	r23, r9
 926:	8a 09       	sbc	r24, r10
 928:	9b 09       	sbc	r25, r11
 92a:	68 3e       	cpi	r22, 0xE8	; 232
 92c:	73 40       	sbci	r23, 0x03	; 3
 92e:	81 05       	cpc	r24, r1
 930:	91 05       	cpc	r25, r1
 932:	70 f3       	brcs	.-36     	; 0x910 <__stack+0x11>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:402
      ms--;
 934:	21 e0       	ldi	r18, 0x01	; 1
 936:	c2 1a       	sub	r12, r18
 938:	d1 08       	sbc	r13, r1
 93a:	e1 08       	sbc	r14, r1
 93c:	f1 08       	sbc	r15, r1
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
 93e:	88 ee       	ldi	r24, 0xE8	; 232
 940:	88 0e       	add	r8, r24
 942:	83 e0       	ldi	r24, 0x03	; 3
 944:	98 1e       	adc	r9, r24
 946:	a1 1c       	adc	r10, r1
 948:	b1 1c       	adc	r11, r1
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
 94a:	c1 14       	cp	r12, r1
 94c:	d1 04       	cpc	r13, r1
 94e:	e1 04       	cpc	r14, r1
 950:	f1 04       	cpc	r15, r1
 952:	29 f7       	brne	.-54     	; 0x91e <__stack+0x1f>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
 954:	ff 90       	pop	r15
 956:	ef 90       	pop	r14
 958:	df 90       	pop	r13
 95a:	cf 90       	pop	r12
 95c:	bf 90       	pop	r11
 95e:	af 90       	pop	r10
 960:	9f 90       	pop	r9
 962:	8f 90       	pop	r8
 964:	08 95       	ret

00000966 <delayMicroseconds>:
delayMicroseconds():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
 966:	82 30       	cpi	r24, 0x02	; 2
 968:	91 05       	cpc	r25, r1
 96a:	38 f0       	brcs	.+14     	; 0x97a <delayMicroseconds+0x14>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
 96c:	88 0f       	add	r24, r24
 96e:	99 1f       	adc	r25, r25
 970:	88 0f       	add	r24, r24
 972:	99 1f       	adc	r25, r25
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
 974:	05 97       	sbiw	r24, 0x05	; 5
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
 976:	01 97       	sbiw	r24, 0x01	; 1
 978:	f1 f7       	brne	.-4      	; 0x976 <delayMicroseconds+0x10>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
 97a:	08 95       	ret

0000097c <init>:
init():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
 97c:	78 94       	sei
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
 97e:	84 b5       	in	r24, 0x24	; 36
 980:	83 60       	ori	r24, 0x03	; 3
 982:	84 bd       	out	0x24, r24	; 36
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
 984:	85 b5       	in	r24, 0x25	; 37
 986:	83 60       	ori	r24, 0x03	; 3
 988:	85 bd       	out	0x25, r24	; 37
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
 98a:	ee e6       	ldi	r30, 0x6E	; 110
 98c:	f0 e0       	ldi	r31, 0x00	; 0
 98e:	80 81       	ld	r24, Z
 990:	81 60       	ori	r24, 0x01	; 1
 992:	80 83       	st	Z, r24
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
 994:	e1 e8       	ldi	r30, 0x81	; 129
 996:	f0 e0       	ldi	r31, 0x00	; 0
 998:	82 e0       	ldi	r24, 0x02	; 2
 99a:	80 83       	st	Z, r24
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
 99c:	80 81       	ld	r24, Z
 99e:	81 60       	ori	r24, 0x01	; 1
 9a0:	80 83       	st	Z, r24
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
 9a2:	e0 e8       	ldi	r30, 0x80	; 128
 9a4:	f0 e0       	ldi	r31, 0x00	; 0
 9a6:	80 81       	ld	r24, Z
 9a8:	81 60       	ori	r24, 0x01	; 1
 9aa:	80 83       	st	Z, r24
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
 9ac:	e1 eb       	ldi	r30, 0xB1	; 177
 9ae:	f0 e0       	ldi	r31, 0x00	; 0
 9b0:	80 81       	ld	r24, Z
 9b2:	84 60       	ori	r24, 0x04	; 4
 9b4:	80 83       	st	Z, r24
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
 9b6:	e0 eb       	ldi	r30, 0xB0	; 176
 9b8:	f0 e0       	ldi	r31, 0x00	; 0
 9ba:	80 81       	ld	r24, Z
 9bc:	81 60       	ori	r24, 0x01	; 1
 9be:	80 83       	st	Z, r24
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
 9c0:	87 e8       	ldi	r24, 0x87	; 135
 9c2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
 9c6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:1072
#endif
}
 9ca:	08 95       	ret

000009cc <turnOffPWM>:
turnOffPWM():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
 9cc:	84 30       	cpi	r24, 0x04	; 4
 9ce:	81 f0       	breq	.+32     	; 0x9f0 <turnOffPWM+0x24>
 9d0:	28 f4       	brcc	.+10     	; 0x9dc <turnOffPWM+0x10>
 9d2:	82 30       	cpi	r24, 0x02	; 2
 9d4:	e9 f0       	breq	.+58     	; 0xa10 <turnOffPWM+0x44>
 9d6:	83 30       	cpi	r24, 0x03	; 3
 9d8:	f9 f0       	breq	.+62     	; 0xa18 <turnOffPWM+0x4c>
 9da:	08 95       	ret
 9dc:	88 30       	cpi	r24, 0x08	; 8
 9de:	71 f0       	breq	.+28     	; 0x9fc <turnOffPWM+0x30>
 9e0:	89 30       	cpi	r24, 0x09	; 9
 9e2:	91 f0       	breq	.+36     	; 0xa08 <turnOffPWM+0x3c>
 9e4:	85 30       	cpi	r24, 0x05	; 5
 9e6:	b9 f4       	brne	.+46     	; 0xa16 <turnOffPWM+0x4a>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
 9e8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 9ec:	8f 7d       	andi	r24, 0xDF	; 223
 9ee:	03 c0       	rjmp	.+6      	; 0x9f6 <turnOffPWM+0x2a>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
 9f0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 9f4:	8f 77       	andi	r24, 0x7F	; 127
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
 9f6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:88
        break;
 9fa:	08 95       	ret
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
 9fc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 a00:	8f 77       	andi	r24, 0x7F	; 127
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
 a02:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:110
        break;
 a06:	08 95       	ret
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
 a08:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 a0c:	8f 7d       	andi	r24, 0xDF	; 223
 a0e:	f9 cf       	rjmp	.-14     	; 0xa02 <turnOffPWM+0x36>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
 a10:	84 b5       	in	r24, 0x24	; 36
 a12:	8f 77       	andi	r24, 0x7F	; 127
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
 a14:	84 bd       	out	0x24, r24	; 36
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
 a16:	08 95       	ret
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
 a18:	84 b5       	in	r24, 0x24	; 36
 a1a:	8f 7d       	andi	r24, 0xDF	; 223
 a1c:	fb cf       	rjmp	.-10     	; 0xa14 <turnOffPWM+0x48>

00000a1e <pinMode>:
pinMode():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 a1e:	cf 93       	push	r28
 a20:	df 93       	push	r29
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	fc 01       	movw	r30, r24
 a26:	e1 58       	subi	r30, 0x81	; 129
 a28:	ff 4f       	sbci	r31, 0xFF	; 255
 a2a:	24 91       	lpm	r18, Z
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
 a2c:	8a 56       	subi	r24, 0x6A	; 106
 a2e:	9f 4f       	sbci	r25, 0xFF	; 255
 a30:	fc 01       	movw	r30, r24
 a32:	84 91       	lpm	r24, Z
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
 a34:	88 23       	and	r24, r24
 a36:	c9 f0       	breq	.+50     	; 0xa6a <pinMode+0x4c>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	88 0f       	add	r24, r24
 a3c:	99 1f       	adc	r25, r25
 a3e:	fc 01       	movw	r30, r24
 a40:	ef 53       	subi	r30, 0x3F	; 63
 a42:	ff 4f       	sbci	r31, 0xFF	; 255
 a44:	a5 91       	lpm	r26, Z+
 a46:	b4 91       	lpm	r27, Z
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
 a48:	fc 01       	movw	r30, r24
 a4a:	e9 54       	subi	r30, 0x49	; 73
 a4c:	ff 4f       	sbci	r31, 0xFF	; 255
 a4e:	c5 91       	lpm	r28, Z+
 a50:	d4 91       	lpm	r29, Z
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
 a52:	61 11       	cpse	r22, r1
 a54:	0d c0       	rjmp	.+26     	; 0xa70 <pinMode+0x52>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
 a56:	9f b7       	in	r25, 0x3f	; 63
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
 a58:	f8 94       	cli
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
 a5a:	8c 91       	ld	r24, X
 a5c:	20 95       	com	r18
 a5e:	82 23       	and	r24, r18
 a60:	8c 93       	st	X, r24
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
 a62:	88 81       	ld	r24, Y
 a64:	28 23       	and	r18, r24
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
 a66:	28 83       	st	Y, r18
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
 a68:	9f bf       	out	0x3f, r25	; 63
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
 a6a:	df 91       	pop	r29
 a6c:	cf 91       	pop	r28
 a6e:	08 95       	ret
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
 a70:	62 30       	cpi	r22, 0x02	; 2
 a72:	51 f4       	brne	.+20     	; 0xa88 <pinMode+0x6a>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
 a74:	9f b7       	in	r25, 0x3f	; 63
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
 a76:	f8 94       	cli
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
 a78:	3c 91       	ld	r19, X
 a7a:	82 2f       	mov	r24, r18
 a7c:	80 95       	com	r24
 a7e:	83 23       	and	r24, r19
 a80:	8c 93       	st	X, r24
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
 a82:	e8 81       	ld	r30, Y
 a84:	2e 2b       	or	r18, r30
 a86:	ef cf       	rjmp	.-34     	; 0xa66 <pinMode+0x48>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
 a88:	8f b7       	in	r24, 0x3f	; 63
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
 a8a:	f8 94       	cli
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
 a8c:	ec 91       	ld	r30, X
 a8e:	2e 2b       	or	r18, r30
 a90:	2c 93       	st	X, r18
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
 a92:	8f bf       	out	0x3f, r24	; 63
 a94:	ea cf       	rjmp	.-44     	; 0xa6a <pinMode+0x4c>

00000a96 <digitalWrite>:
digitalWrite():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 a96:	1f 93       	push	r17
 a98:	cf 93       	push	r28
 a9a:	df 93       	push	r29
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
 a9c:	28 2f       	mov	r18, r24
 a9e:	30 e0       	ldi	r19, 0x00	; 0
 aa0:	f9 01       	movw	r30, r18
 aa2:	e8 59       	subi	r30, 0x98	; 152
 aa4:	ff 4f       	sbci	r31, 0xFF	; 255
 aa6:	84 91       	lpm	r24, Z
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
 aa8:	f9 01       	movw	r30, r18
 aaa:	e1 58       	subi	r30, 0x81	; 129
 aac:	ff 4f       	sbci	r31, 0xFF	; 255
 aae:	d4 91       	lpm	r29, Z
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
 ab0:	f9 01       	movw	r30, r18
 ab2:	ea 56       	subi	r30, 0x6A	; 106
 ab4:	ff 4f       	sbci	r31, 0xFF	; 255
 ab6:	c4 91       	lpm	r28, Z
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
 ab8:	cc 23       	and	r28, r28
 aba:	a9 f0       	breq	.+42     	; 0xae6 <digitalWrite+0x50>
 abc:	16 2f       	mov	r17, r22
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 abe:	81 11       	cpse	r24, r1
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
 ac0:	0e 94 e6 04 	call	0x9cc	; 0x9cc <turnOffPWM>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
 ac4:	ec 2f       	mov	r30, r28
 ac6:	f0 e0       	ldi	r31, 0x00	; 0
 ac8:	ee 0f       	add	r30, r30
 aca:	ff 1f       	adc	r31, r31
 acc:	e9 54       	subi	r30, 0x49	; 73
 ace:	ff 4f       	sbci	r31, 0xFF	; 255
 ad0:	a5 91       	lpm	r26, Z+
 ad2:	b4 91       	lpm	r27, Z
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
 ad4:	8f b7       	in	r24, 0x3f	; 63
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
 ad6:	f8 94       	cli
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
 ad8:	ec 91       	ld	r30, X
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
 ada:	11 11       	cpse	r17, r1
 adc:	08 c0       	rjmp	.+16     	; 0xaee <digitalWrite+0x58>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
 ade:	d0 95       	com	r29
 ae0:	de 23       	and	r29, r30
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
 ae2:	dc 93       	st	X, r29
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
 ae4:	8f bf       	out	0x3f, r24	; 63
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:212
}
 ae6:	df 91       	pop	r29
 ae8:	cf 91       	pop	r28
 aea:	1f 91       	pop	r17
 aec:	08 95       	ret
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
 aee:	de 2b       	or	r29, r30
 af0:	f8 cf       	rjmp	.-16     	; 0xae2 <digitalWrite+0x4c>

00000af2 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 af2:	fc 01       	movw	r30, r24
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 af4:	91 8d       	ldd	r25, Z+25	; 0x19
 af6:	22 8d       	ldd	r18, Z+26	; 0x1a
 af8:	89 2f       	mov	r24, r25
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	80 5c       	subi	r24, 0xC0	; 192
 afe:	9f 4f       	sbci	r25, 0xFF	; 255
 b00:	82 1b       	sub	r24, r18
 b02:	91 09       	sbc	r25, r1
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:166
}
 b04:	8f 73       	andi	r24, 0x3F	; 63
 b06:	99 27       	eor	r25, r25
 b08:	08 95       	ret

00000b0a <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:169

int HardwareSerial::peek(void)
{
 b0a:	fc 01       	movw	r30, r24
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
 b0c:	91 8d       	ldd	r25, Z+25	; 0x19
 b0e:	82 8d       	ldd	r24, Z+26	; 0x1a
 b10:	98 17       	cp	r25, r24
 b12:	31 f0       	breq	.+12     	; 0xb20 <HardwareSerial::peek()+0x16>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 b14:	82 8d       	ldd	r24, Z+26	; 0x1a
 b16:	e8 0f       	add	r30, r24
 b18:	f1 1d       	adc	r31, r1
 b1a:	85 8d       	ldd	r24, Z+29	; 0x1d
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	08 95       	ret
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 b20:	8f ef       	ldi	r24, 0xFF	; 255
 b22:	9f ef       	ldi	r25, 0xFF	; 255
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 b24:	08 95       	ret

00000b26 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:178

int HardwareSerial::read(void)
{
 b26:	fc 01       	movw	r30, r24
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 b28:	91 8d       	ldd	r25, Z+25	; 0x19
 b2a:	82 8d       	ldd	r24, Z+26	; 0x1a
 b2c:	98 17       	cp	r25, r24
 b2e:	61 f0       	breq	.+24     	; 0xb48 <HardwareSerial::read()+0x22>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 b30:	a2 8d       	ldd	r26, Z+26	; 0x1a
 b32:	ae 0f       	add	r26, r30
 b34:	bf 2f       	mov	r27, r31
 b36:	b1 1d       	adc	r27, r1
 b38:	5d 96       	adiw	r26, 0x1d	; 29
 b3a:	8c 91       	ld	r24, X
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 b3c:	92 8d       	ldd	r25, Z+26	; 0x1a
 b3e:	9f 5f       	subi	r25, 0xFF	; 255
 b40:	9f 73       	andi	r25, 0x3F	; 63
 b42:	92 8f       	std	Z+26, r25	; 0x1a
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
 b44:	90 e0       	ldi	r25, 0x00	; 0
 b46:	08 95       	ret
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 b48:	8f ef       	ldi	r24, 0xFF	; 255
 b4a:	9f ef       	ldi	r25, 0xFF	; 255
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 b4c:	08 95       	ret

00000b4e <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
 b4e:	fc 01       	movw	r30, r24
 b50:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
 b52:	44 8d       	ldd	r20, Z+28	; 0x1c
 b54:	25 2f       	mov	r18, r21
 b56:	30 e0       	ldi	r19, 0x00	; 0
 b58:	84 2f       	mov	r24, r20
 b5a:	90 e0       	ldi	r25, 0x00	; 0
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 b5c:	82 1b       	sub	r24, r18
 b5e:	93 0b       	sbc	r25, r19
 b60:	54 17       	cp	r21, r20
 b62:	10 f0       	brcs	.+4      	; 0xb68 <HardwareSerial::availableForWrite()+0x1a>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:198 (discriminator 1)
 b64:	cf 96       	adiw	r24, 0x3f	; 63
 b66:	08 95       	ret
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
 b68:	01 97       	sbiw	r24, 0x01	; 1
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:200
}
 b6a:	08 95       	ret

00000b6c <serialEventRun()>:
_Z14serialEventRunv():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 b6c:	8b e8       	ldi	r24, 0x8B	; 139
 b6e:	93 e0       	ldi	r25, 0x03	; 3
 b70:	89 2b       	or	r24, r25
 b72:	49 f0       	breq	.+18     	; 0xb86 <serialEventRun()+0x1a>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 1)
 b74:	80 e0       	ldi	r24, 0x00	; 0
 b76:	90 e0       	ldi	r25, 0x00	; 0
 b78:	89 2b       	or	r24, r25
 b7a:	29 f0       	breq	.+10     	; 0xb86 <serialEventRun()+0x1a>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 3)
 b7c:	0e 94 8b 03 	call	0x716	; 0x716 <Serial0_available()>
 b80:	81 11       	cpse	r24, r1
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:67
 b82:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
 b86:	08 95       	ret

00000b88 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 b88:	fc 01       	movw	r30, r24
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 b8a:	a4 8d       	ldd	r26, Z+28	; 0x1c
 b8c:	a8 0f       	add	r26, r24
 b8e:	b9 2f       	mov	r27, r25
 b90:	b1 1d       	adc	r27, r1
 b92:	a3 5a       	subi	r26, 0xA3	; 163
 b94:	bf 4f       	sbci	r27, 0xFF	; 255
 b96:	2c 91       	ld	r18, X
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 b98:	84 8d       	ldd	r24, Z+28	; 0x1c
 b9a:	90 e0       	ldi	r25, 0x00	; 0
 b9c:	01 96       	adiw	r24, 0x01	; 1
 b9e:	8f 73       	andi	r24, 0x3F	; 63
 ba0:	99 27       	eor	r25, r25
 ba2:	84 8f       	std	Z+28, r24	; 0x1c
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
 ba4:	a6 89       	ldd	r26, Z+22	; 0x16
 ba6:	b7 89       	ldd	r27, Z+23	; 0x17
 ba8:	2c 93       	st	X, r18
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 baa:	a0 89       	ldd	r26, Z+16	; 0x10
 bac:	b1 89       	ldd	r27, Z+17	; 0x11
 bae:	8c 91       	ld	r24, X
 bb0:	83 70       	andi	r24, 0x03	; 3
 bb2:	80 64       	ori	r24, 0x40	; 64
 bb4:	8c 93       	st	X, r24
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
 bb6:	93 8d       	ldd	r25, Z+27	; 0x1b
 bb8:	84 8d       	ldd	r24, Z+28	; 0x1c
 bba:	98 13       	cpse	r25, r24
 bbc:	06 c0       	rjmp	.+12     	; 0xbca <HardwareSerial::_tx_udr_empty_irq()+0x42>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
 bbe:	02 88       	ldd	r0, Z+18	; 0x12
 bc0:	f3 89       	ldd	r31, Z+19	; 0x13
 bc2:	e0 2d       	mov	r30, r0
 bc4:	80 81       	ld	r24, Z
 bc6:	8f 7d       	andi	r24, 0xDF	; 223
 bc8:	80 83       	st	Z, r24
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
 bca:	08 95       	ret

00000bcc <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 bcc:	cf 93       	push	r28
 bce:	df 93       	push	r29
 bd0:	ec 01       	movw	r28, r24
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 bd2:	88 8d       	ldd	r24, Y+24	; 0x18
 bd4:	88 23       	and	r24, r24
 bd6:	b9 f0       	breq	.+46     	; 0xc06 <HardwareSerial::flush()+0x3a>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 bd8:	aa 89       	ldd	r26, Y+18	; 0x12
 bda:	bb 89       	ldd	r27, Y+19	; 0x13
 bdc:	e8 89       	ldd	r30, Y+16	; 0x10
 bde:	f9 89       	ldd	r31, Y+17	; 0x11
 be0:	8c 91       	ld	r24, X
 be2:	85 fd       	sbrc	r24, 5
 be4:	03 c0       	rjmp	.+6      	; 0xbec <HardwareSerial::flush()+0x20>
 be6:	80 81       	ld	r24, Z
 be8:	86 fd       	sbrc	r24, 6
 bea:	0d c0       	rjmp	.+26     	; 0xc06 <HardwareSerial::flush()+0x3a>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 bec:	0f b6       	in	r0, 0x3f	; 63
 bee:	07 fc       	sbrc	r0, 7
 bf0:	f7 cf       	rjmp	.-18     	; 0xbe0 <HardwareSerial::flush()+0x14>
 bf2:	8c 91       	ld	r24, X
 bf4:	85 ff       	sbrs	r24, 5
 bf6:	f2 cf       	rjmp	.-28     	; 0xbdc <HardwareSerial::flush()+0x10>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
 bf8:	80 81       	ld	r24, Z
 bfa:	85 ff       	sbrs	r24, 5
 bfc:	ed cf       	rjmp	.-38     	; 0xbd8 <HardwareSerial::flush()+0xc>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
 bfe:	ce 01       	movw	r24, r28
 c00:	0e 94 c4 05 	call	0xb88	; 0xb88 <HardwareSerial::_tx_udr_empty_irq()>
 c04:	e9 cf       	rjmp	.-46     	; 0xbd8 <HardwareSerial::flush()+0xc>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 c06:	df 91       	pop	r29
 c08:	cf 91       	pop	r28
 c0a:	08 95       	ret

00000c0c <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:223

size_t HardwareSerial::write(uint8_t c)
{
 c0c:	ef 92       	push	r14
 c0e:	ff 92       	push	r15
 c10:	0f 93       	push	r16
 c12:	1f 93       	push	r17
 c14:	cf 93       	push	r28
 c16:	df 93       	push	r29
 c18:	ec 01       	movw	r28, r24
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
 c1a:	81 e0       	ldi	r24, 0x01	; 1
 c1c:	88 8f       	std	Y+24, r24	; 0x18
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 c1e:	9b 8d       	ldd	r25, Y+27	; 0x1b
 c20:	8c 8d       	ldd	r24, Y+28	; 0x1c
 c22:	98 13       	cpse	r25, r24
 c24:	1a c0       	rjmp	.+52     	; 0xc5a <HardwareSerial::write(unsigned char)+0x4e>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:229 (discriminator 1)
 c26:	e8 89       	ldd	r30, Y+16	; 0x10
 c28:	f9 89       	ldd	r31, Y+17	; 0x11
 c2a:	80 81       	ld	r24, Z
 c2c:	85 ff       	sbrs	r24, 5
 c2e:	15 c0       	rjmp	.+42     	; 0xc5a <HardwareSerial::write(unsigned char)+0x4e>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 c30:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/vakhaib/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 c32:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
 c34:	ee 89       	ldd	r30, Y+22	; 0x16
 c36:	ff 89       	ldd	r31, Y+23	; 0x17
 c38:	60 83       	st	Z, r22
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 c3a:	e8 89       	ldd	r30, Y+16	; 0x10
 c3c:	f9 89       	ldd	r31, Y+17	; 0x11
 c3e:	80 81       	ld	r24, Z
 c40:	83 70       	andi	r24, 0x03	; 3
 c42:	80 64       	ori	r24, 0x40	; 64
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
 c44:	80 83       	st	Z, r24
__iRestore():
/home/vakhaib/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 c46:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
 c48:	81 e0       	ldi	r24, 0x01	; 1
 c4a:	90 e0       	ldi	r25, 0x00	; 0
 c4c:	df 91       	pop	r29
 c4e:	cf 91       	pop	r28
 c50:	1f 91       	pop	r17
 c52:	0f 91       	pop	r16
 c54:	ff 90       	pop	r15
 c56:	ef 90       	pop	r14
 c58:	08 95       	ret
 c5a:	f6 2e       	mov	r15, r22
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 c5c:	0b 8d       	ldd	r16, Y+27	; 0x1b
 c5e:	10 e0       	ldi	r17, 0x00	; 0
 c60:	0f 5f       	subi	r16, 0xFF	; 255
 c62:	1f 4f       	sbci	r17, 0xFF	; 255
 c64:	0f 73       	andi	r16, 0x3F	; 63
 c66:	11 27       	eor	r17, r17
 c68:	e0 2e       	mov	r14, r16
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 c6a:	8c 8d       	ldd	r24, Y+28	; 0x1c
 c6c:	8e 11       	cpse	r24, r14
 c6e:	0c c0       	rjmp	.+24     	; 0xc88 <HardwareSerial::write(unsigned char)+0x7c>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
 c70:	0f b6       	in	r0, 0x3f	; 63
 c72:	07 fc       	sbrc	r0, 7
 c74:	fa cf       	rjmp	.-12     	; 0xc6a <HardwareSerial::write(unsigned char)+0x5e>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 c76:	e8 89       	ldd	r30, Y+16	; 0x10
 c78:	f9 89       	ldd	r31, Y+17	; 0x11
 c7a:	80 81       	ld	r24, Z
 c7c:	85 ff       	sbrs	r24, 5
 c7e:	f5 cf       	rjmp	.-22     	; 0xc6a <HardwareSerial::write(unsigned char)+0x5e>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
 c80:	ce 01       	movw	r24, r28
 c82:	0e 94 c4 05 	call	0xb88	; 0xb88 <HardwareSerial::_tx_udr_empty_irq()>
 c86:	f1 cf       	rjmp	.-30     	; 0xc6a <HardwareSerial::write(unsigned char)+0x5e>
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 c88:	eb 8d       	ldd	r30, Y+27	; 0x1b
 c8a:	ec 0f       	add	r30, r28
 c8c:	fd 2f       	mov	r31, r29
 c8e:	f1 1d       	adc	r31, r1
 c90:	e3 5a       	subi	r30, 0xA3	; 163
 c92:	ff 4f       	sbci	r31, 0xFF	; 255
 c94:	f0 82       	st	Z, r15
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 c96:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/vakhaib/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 c98:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
 c9a:	0b 8f       	std	Y+27, r16	; 0x1b
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
 c9c:	ea 89       	ldd	r30, Y+18	; 0x12
 c9e:	fb 89       	ldd	r31, Y+19	; 0x13
 ca0:	80 81       	ld	r24, Z
 ca2:	80 62       	ori	r24, 0x20	; 32
 ca4:	cf cf       	rjmp	.-98     	; 0xc44 <HardwareSerial::write(unsigned char)+0x38>

00000ca6 <yield>:
__empty():
/home/vakhaib/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
 ca6:	08 95       	ret

00000ca8 <__subsf3>:
__subsf3():
 ca8:	50 58       	subi	r21, 0x80	; 128

00000caa <__addsf3>:
 caa:	bb 27       	eor	r27, r27
 cac:	aa 27       	eor	r26, r26
 cae:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__addsf3x>
 cb2:	0c 94 39 07 	jmp	0xe72	; 0xe72 <__fp_round>
__addsf3():
 cb6:	0e 94 2b 07 	call	0xe56	; 0xe56 <__fp_pscA>
 cba:	38 f0       	brcs	.+14     	; 0xcca <__addsf3+0x20>
 cbc:	0e 94 32 07 	call	0xe64	; 0xe64 <__fp_pscB>
 cc0:	20 f0       	brcs	.+8      	; 0xcca <__addsf3+0x20>
 cc2:	39 f4       	brne	.+14     	; 0xcd2 <__addsf3+0x28>
 cc4:	9f 3f       	cpi	r25, 0xFF	; 255
 cc6:	19 f4       	brne	.+6      	; 0xcce <__addsf3+0x24>
 cc8:	26 f4       	brtc	.+8      	; 0xcd2 <__addsf3+0x28>
 cca:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__fp_nan>
 cce:	0e f4       	brtc	.+2      	; 0xcd2 <__addsf3+0x28>
 cd0:	e0 95       	com	r30
 cd2:	e7 fb       	bst	r30, 7
 cd4:	0c 94 22 07 	jmp	0xe44	; 0xe44 <__fp_inf>

00000cd8 <__addsf3x>:
__addsf3x():
 cd8:	e9 2f       	mov	r30, r25
 cda:	0e 94 4a 07 	call	0xe94	; 0xe94 <__fp_split3>
 cde:	58 f3       	brcs	.-42     	; 0xcb6 <__addsf3+0xc>
 ce0:	ba 17       	cp	r27, r26
 ce2:	62 07       	cpc	r22, r18
 ce4:	73 07       	cpc	r23, r19
 ce6:	84 07       	cpc	r24, r20
 ce8:	95 07       	cpc	r25, r21
 cea:	20 f0       	brcs	.+8      	; 0xcf4 <__addsf3x+0x1c>
 cec:	79 f4       	brne	.+30     	; 0xd0c <__addsf3x+0x34>
 cee:	a6 f5       	brtc	.+104    	; 0xd58 <__addsf3x+0x80>
 cf0:	0c 94 6c 07 	jmp	0xed8	; 0xed8 <__fp_zero>
 cf4:	0e f4       	brtc	.+2      	; 0xcf8 <__addsf3x+0x20>
 cf6:	e0 95       	com	r30
 cf8:	0b 2e       	mov	r0, r27
 cfa:	ba 2f       	mov	r27, r26
 cfc:	a0 2d       	mov	r26, r0
 cfe:	0b 01       	movw	r0, r22
 d00:	b9 01       	movw	r22, r18
 d02:	90 01       	movw	r18, r0
 d04:	0c 01       	movw	r0, r24
 d06:	ca 01       	movw	r24, r20
 d08:	a0 01       	movw	r20, r0
 d0a:	11 24       	eor	r1, r1
 d0c:	ff 27       	eor	r31, r31
 d0e:	59 1b       	sub	r21, r25
 d10:	99 f0       	breq	.+38     	; 0xd38 <__addsf3x+0x60>
 d12:	59 3f       	cpi	r21, 0xF9	; 249
 d14:	50 f4       	brcc	.+20     	; 0xd2a <__addsf3x+0x52>
 d16:	50 3e       	cpi	r21, 0xE0	; 224
 d18:	68 f1       	brcs	.+90     	; 0xd74 <__addsf3x+0x9c>
 d1a:	1a 16       	cp	r1, r26
 d1c:	f0 40       	sbci	r31, 0x00	; 0
 d1e:	a2 2f       	mov	r26, r18
 d20:	23 2f       	mov	r18, r19
 d22:	34 2f       	mov	r19, r20
 d24:	44 27       	eor	r20, r20
 d26:	58 5f       	subi	r21, 0xF8	; 248
 d28:	f3 cf       	rjmp	.-26     	; 0xd10 <__addsf3x+0x38>
 d2a:	46 95       	lsr	r20
 d2c:	37 95       	ror	r19
 d2e:	27 95       	ror	r18
 d30:	a7 95       	ror	r26
 d32:	f0 40       	sbci	r31, 0x00	; 0
 d34:	53 95       	inc	r21
 d36:	c9 f7       	brne	.-14     	; 0xd2a <__addsf3x+0x52>
 d38:	7e f4       	brtc	.+30     	; 0xd58 <__addsf3x+0x80>
 d3a:	1f 16       	cp	r1, r31
 d3c:	ba 0b       	sbc	r27, r26
 d3e:	62 0b       	sbc	r22, r18
 d40:	73 0b       	sbc	r23, r19
 d42:	84 0b       	sbc	r24, r20
 d44:	ba f0       	brmi	.+46     	; 0xd74 <__addsf3x+0x9c>
 d46:	91 50       	subi	r25, 0x01	; 1
 d48:	a1 f0       	breq	.+40     	; 0xd72 <__addsf3x+0x9a>
 d4a:	ff 0f       	add	r31, r31
 d4c:	bb 1f       	adc	r27, r27
 d4e:	66 1f       	adc	r22, r22
 d50:	77 1f       	adc	r23, r23
 d52:	88 1f       	adc	r24, r24
 d54:	c2 f7       	brpl	.-16     	; 0xd46 <__addsf3x+0x6e>
 d56:	0e c0       	rjmp	.+28     	; 0xd74 <__addsf3x+0x9c>
 d58:	ba 0f       	add	r27, r26
 d5a:	62 1f       	adc	r22, r18
 d5c:	73 1f       	adc	r23, r19
 d5e:	84 1f       	adc	r24, r20
 d60:	48 f4       	brcc	.+18     	; 0xd74 <__addsf3x+0x9c>
 d62:	87 95       	ror	r24
 d64:	77 95       	ror	r23
 d66:	67 95       	ror	r22
 d68:	b7 95       	ror	r27
 d6a:	f7 95       	ror	r31
 d6c:	9e 3f       	cpi	r25, 0xFE	; 254
 d6e:	08 f0       	brcs	.+2      	; 0xd72 <__addsf3x+0x9a>
 d70:	b0 cf       	rjmp	.-160    	; 0xcd2 <__addsf3+0x28>
 d72:	93 95       	inc	r25
 d74:	88 0f       	add	r24, r24
 d76:	08 f0       	brcs	.+2      	; 0xd7a <__addsf3x+0xa2>
 d78:	99 27       	eor	r25, r25
 d7a:	ee 0f       	add	r30, r30
 d7c:	97 95       	ror	r25
 d7e:	87 95       	ror	r24
 d80:	08 95       	ret

00000d82 <__floatunsisf>:
 d82:	e8 94       	clt
 d84:	09 c0       	rjmp	.+18     	; 0xd98 <__floatsisf+0x12>

00000d86 <__floatsisf>:
 d86:	97 fb       	bst	r25, 7
 d88:	3e f4       	brtc	.+14     	; 0xd98 <__floatsisf+0x12>
 d8a:	90 95       	com	r25
 d8c:	80 95       	com	r24
 d8e:	70 95       	com	r23
 d90:	61 95       	neg	r22
 d92:	7f 4f       	sbci	r23, 0xFF	; 255
 d94:	8f 4f       	sbci	r24, 0xFF	; 255
 d96:	9f 4f       	sbci	r25, 0xFF	; 255
 d98:	99 23       	and	r25, r25
 d9a:	a9 f0       	breq	.+42     	; 0xdc6 <__floatsisf+0x40>
 d9c:	f9 2f       	mov	r31, r25
 d9e:	96 e9       	ldi	r25, 0x96	; 150
 da0:	bb 27       	eor	r27, r27
 da2:	93 95       	inc	r25
__floatsisf():
 da4:	f6 95       	lsr	r31
 da6:	87 95       	ror	r24
 da8:	77 95       	ror	r23
 daa:	67 95       	ror	r22
 dac:	b7 95       	ror	r27
 dae:	f1 11       	cpse	r31, r1
 db0:	f8 cf       	rjmp	.-16     	; 0xda2 <__floatsisf+0x1c>
 db2:	fa f4       	brpl	.+62     	; 0xdf2 <__floatsisf+0x6c>
 db4:	bb 0f       	add	r27, r27
 db6:	11 f4       	brne	.+4      	; 0xdbc <__floatsisf+0x36>
 db8:	60 ff       	sbrs	r22, 0
 dba:	1b c0       	rjmp	.+54     	; 0xdf2 <__floatsisf+0x6c>
 dbc:	6f 5f       	subi	r22, 0xFF	; 255
 dbe:	7f 4f       	sbci	r23, 0xFF	; 255
 dc0:	8f 4f       	sbci	r24, 0xFF	; 255
 dc2:	9f 4f       	sbci	r25, 0xFF	; 255
 dc4:	16 c0       	rjmp	.+44     	; 0xdf2 <__floatsisf+0x6c>
 dc6:	88 23       	and	r24, r24
 dc8:	11 f0       	breq	.+4      	; 0xdce <__floatsisf+0x48>
 dca:	96 e9       	ldi	r25, 0x96	; 150
 dcc:	11 c0       	rjmp	.+34     	; 0xdf0 <__floatsisf+0x6a>
 dce:	77 23       	and	r23, r23
 dd0:	21 f0       	breq	.+8      	; 0xdda <__floatsisf+0x54>
 dd2:	9e e8       	ldi	r25, 0x8E	; 142
 dd4:	87 2f       	mov	r24, r23
 dd6:	76 2f       	mov	r23, r22
 dd8:	05 c0       	rjmp	.+10     	; 0xde4 <__floatsisf+0x5e>
 dda:	66 23       	and	r22, r22
 ddc:	71 f0       	breq	.+28     	; 0xdfa <__floatsisf+0x74>
 dde:	96 e8       	ldi	r25, 0x86	; 134
 de0:	86 2f       	mov	r24, r22
 de2:	70 e0       	ldi	r23, 0x00	; 0
 de4:	60 e0       	ldi	r22, 0x00	; 0
 de6:	2a f0       	brmi	.+10     	; 0xdf2 <__floatsisf+0x6c>
 de8:	9a 95       	dec	r25
 dea:	66 0f       	add	r22, r22
 dec:	77 1f       	adc	r23, r23
 dee:	88 1f       	adc	r24, r24
 df0:	da f7       	brpl	.-10     	; 0xde8 <__floatsisf+0x62>
 df2:	88 0f       	add	r24, r24
 df4:	96 95       	lsr	r25
 df6:	87 95       	ror	r24
 df8:	97 f9       	bld	r25, 7
 dfa:	08 95       	ret

00000dfc <__fp_cmp>:
__fp_cmp():
 dfc:	99 0f       	add	r25, r25
 dfe:	00 08       	sbc	r0, r0
 e00:	55 0f       	add	r21, r21
 e02:	aa 0b       	sbc	r26, r26
 e04:	e0 e8       	ldi	r30, 0x80	; 128
 e06:	fe ef       	ldi	r31, 0xFE	; 254
 e08:	16 16       	cp	r1, r22
 e0a:	17 06       	cpc	r1, r23
 e0c:	e8 07       	cpc	r30, r24
 e0e:	f9 07       	cpc	r31, r25
 e10:	c0 f0       	brcs	.+48     	; 0xe42 <__fp_cmp+0x46>
 e12:	12 16       	cp	r1, r18
 e14:	13 06       	cpc	r1, r19
 e16:	e4 07       	cpc	r30, r20
 e18:	f5 07       	cpc	r31, r21
 e1a:	98 f0       	brcs	.+38     	; 0xe42 <__fp_cmp+0x46>
 e1c:	62 1b       	sub	r22, r18
 e1e:	73 0b       	sbc	r23, r19
 e20:	84 0b       	sbc	r24, r20
 e22:	95 0b       	sbc	r25, r21
 e24:	39 f4       	brne	.+14     	; 0xe34 <__fp_cmp+0x38>
 e26:	0a 26       	eor	r0, r26
 e28:	61 f0       	breq	.+24     	; 0xe42 <__fp_cmp+0x46>
 e2a:	23 2b       	or	r18, r19
 e2c:	24 2b       	or	r18, r20
 e2e:	25 2b       	or	r18, r21
 e30:	21 f4       	brne	.+8      	; 0xe3a <__fp_cmp+0x3e>
 e32:	08 95       	ret
 e34:	0a 26       	eor	r0, r26
 e36:	09 f4       	brne	.+2      	; 0xe3a <__fp_cmp+0x3e>
 e38:	a1 40       	sbci	r26, 0x01	; 1
 e3a:	a6 95       	lsr	r26
 e3c:	8f ef       	ldi	r24, 0xFF	; 255
 e3e:	81 1d       	adc	r24, r1
 e40:	81 1d       	adc	r24, r1
 e42:	08 95       	ret

00000e44 <__fp_inf>:
__fp_inf():
 e44:	97 f9       	bld	r25, 7
 e46:	9f 67       	ori	r25, 0x7F	; 127
 e48:	80 e8       	ldi	r24, 0x80	; 128
 e4a:	70 e0       	ldi	r23, 0x00	; 0
 e4c:	60 e0       	ldi	r22, 0x00	; 0
 e4e:	08 95       	ret

00000e50 <__fp_nan>:
__fp_nan():
 e50:	9f ef       	ldi	r25, 0xFF	; 255
 e52:	80 ec       	ldi	r24, 0xC0	; 192
 e54:	08 95       	ret

00000e56 <__fp_pscA>:
__fp_pscA():
 e56:	00 24       	eor	r0, r0
 e58:	0a 94       	dec	r0
 e5a:	16 16       	cp	r1, r22
 e5c:	17 06       	cpc	r1, r23
 e5e:	18 06       	cpc	r1, r24
 e60:	09 06       	cpc	r0, r25
 e62:	08 95       	ret

00000e64 <__fp_pscB>:
__fp_pscB():
 e64:	00 24       	eor	r0, r0
 e66:	0a 94       	dec	r0
 e68:	12 16       	cp	r1, r18
 e6a:	13 06       	cpc	r1, r19
 e6c:	14 06       	cpc	r1, r20
 e6e:	05 06       	cpc	r0, r21
 e70:	08 95       	ret

00000e72 <__fp_round>:
__fp_round():
 e72:	09 2e       	mov	r0, r25
 e74:	03 94       	inc	r0
 e76:	00 0c       	add	r0, r0
 e78:	11 f4       	brne	.+4      	; 0xe7e <__fp_round+0xc>
 e7a:	88 23       	and	r24, r24
 e7c:	52 f0       	brmi	.+20     	; 0xe92 <__fp_round+0x20>
 e7e:	bb 0f       	add	r27, r27
 e80:	40 f4       	brcc	.+16     	; 0xe92 <__fp_round+0x20>
 e82:	bf 2b       	or	r27, r31
 e84:	11 f4       	brne	.+4      	; 0xe8a <__fp_round+0x18>
 e86:	60 ff       	sbrs	r22, 0
 e88:	04 c0       	rjmp	.+8      	; 0xe92 <__fp_round+0x20>
 e8a:	6f 5f       	subi	r22, 0xFF	; 255
 e8c:	7f 4f       	sbci	r23, 0xFF	; 255
 e8e:	8f 4f       	sbci	r24, 0xFF	; 255
 e90:	9f 4f       	sbci	r25, 0xFF	; 255
 e92:	08 95       	ret

00000e94 <__fp_split3>:
__fp_split3():
 e94:	57 fd       	sbrc	r21, 7
 e96:	90 58       	subi	r25, 0x80	; 128
 e98:	44 0f       	add	r20, r20
 e9a:	55 1f       	adc	r21, r21
 e9c:	59 f0       	breq	.+22     	; 0xeb4 <__fp_splitA+0x10>
 e9e:	5f 3f       	cpi	r21, 0xFF	; 255
 ea0:	71 f0       	breq	.+28     	; 0xebe <__fp_splitA+0x1a>
 ea2:	47 95       	ror	r20

00000ea4 <__fp_splitA>:
 ea4:	88 0f       	add	r24, r24
 ea6:	97 fb       	bst	r25, 7
 ea8:	99 1f       	adc	r25, r25
 eaa:	61 f0       	breq	.+24     	; 0xec4 <__fp_splitA+0x20>
 eac:	9f 3f       	cpi	r25, 0xFF	; 255
 eae:	79 f0       	breq	.+30     	; 0xece <__fp_splitA+0x2a>
 eb0:	87 95       	ror	r24
 eb2:	08 95       	ret
 eb4:	12 16       	cp	r1, r18
 eb6:	13 06       	cpc	r1, r19
 eb8:	14 06       	cpc	r1, r20
 eba:	55 1f       	adc	r21, r21
 ebc:	f2 cf       	rjmp	.-28     	; 0xea2 <__fp_split3+0xe>
 ebe:	46 95       	lsr	r20
 ec0:	f1 df       	rcall	.-30     	; 0xea4 <__fp_splitA>
 ec2:	08 c0       	rjmp	.+16     	; 0xed4 <__fp_splitA+0x30>
 ec4:	16 16       	cp	r1, r22
 ec6:	17 06       	cpc	r1, r23
 ec8:	18 06       	cpc	r1, r24
 eca:	99 1f       	adc	r25, r25
 ecc:	f1 cf       	rjmp	.-30     	; 0xeb0 <__fp_splitA+0xc>
 ece:	86 95       	lsr	r24
 ed0:	71 05       	cpc	r23, r1
 ed2:	61 05       	cpc	r22, r1
 ed4:	08 94       	sec
 ed6:	08 95       	ret

00000ed8 <__fp_zero>:
__fp_zero():
 ed8:	e8 94       	clt

00000eda <__fp_szero>:
 eda:	bb 27       	eor	r27, r27
 edc:	66 27       	eor	r22, r22
 ede:	77 27       	eor	r23, r23
 ee0:	cb 01       	movw	r24, r22
 ee2:	97 f9       	bld	r25, 7
 ee4:	08 95       	ret

00000ee6 <__gesf2>:
__gesf2():
 ee6:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__fp_cmp>
 eea:	08 f4       	brcc	.+2      	; 0xeee <__gesf2+0x8>
 eec:	8f ef       	ldi	r24, 0xFF	; 255
 eee:	08 95       	ret

00000ef0 <__mulsf3>:
__mulsf3():
 ef0:	0e 94 8b 07 	call	0xf16	; 0xf16 <__mulsf3x>
 ef4:	0c 94 39 07 	jmp	0xe72	; 0xe72 <__fp_round>
 ef8:	0e 94 2b 07 	call	0xe56	; 0xe56 <__fp_pscA>
 efc:	38 f0       	brcs	.+14     	; 0xf0c <__mulsf3+0x1c>
 efe:	0e 94 32 07 	call	0xe64	; 0xe64 <__fp_pscB>
 f02:	20 f0       	brcs	.+8      	; 0xf0c <__mulsf3+0x1c>
 f04:	95 23       	and	r25, r21
 f06:	11 f0       	breq	.+4      	; 0xf0c <__mulsf3+0x1c>
 f08:	0c 94 22 07 	jmp	0xe44	; 0xe44 <__fp_inf>
 f0c:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__fp_nan>
 f10:	11 24       	eor	r1, r1
 f12:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__fp_szero>

00000f16 <__mulsf3x>:
__mulsf3x():
 f16:	0e 94 4a 07 	call	0xe94	; 0xe94 <__fp_split3>
 f1a:	70 f3       	brcs	.-36     	; 0xef8 <__mulsf3+0x8>

00000f1c <__mulsf3_pse>:
 f1c:	95 9f       	mul	r25, r21
 f1e:	c1 f3       	breq	.-16     	; 0xf10 <__mulsf3+0x20>
 f20:	95 0f       	add	r25, r21
 f22:	50 e0       	ldi	r21, 0x00	; 0
 f24:	55 1f       	adc	r21, r21
 f26:	62 9f       	mul	r22, r18
 f28:	f0 01       	movw	r30, r0
 f2a:	72 9f       	mul	r23, r18
 f2c:	bb 27       	eor	r27, r27
 f2e:	f0 0d       	add	r31, r0
 f30:	b1 1d       	adc	r27, r1
 f32:	63 9f       	mul	r22, r19
 f34:	aa 27       	eor	r26, r26
 f36:	f0 0d       	add	r31, r0
 f38:	b1 1d       	adc	r27, r1
 f3a:	aa 1f       	adc	r26, r26
 f3c:	64 9f       	mul	r22, r20
 f3e:	66 27       	eor	r22, r22
 f40:	b0 0d       	add	r27, r0
 f42:	a1 1d       	adc	r26, r1
 f44:	66 1f       	adc	r22, r22
 f46:	82 9f       	mul	r24, r18
 f48:	22 27       	eor	r18, r18
 f4a:	b0 0d       	add	r27, r0
 f4c:	a1 1d       	adc	r26, r1
 f4e:	62 1f       	adc	r22, r18
 f50:	73 9f       	mul	r23, r19
 f52:	b0 0d       	add	r27, r0
 f54:	a1 1d       	adc	r26, r1
 f56:	62 1f       	adc	r22, r18
 f58:	83 9f       	mul	r24, r19
 f5a:	a0 0d       	add	r26, r0
 f5c:	61 1d       	adc	r22, r1
 f5e:	22 1f       	adc	r18, r18
 f60:	74 9f       	mul	r23, r20
 f62:	33 27       	eor	r19, r19
 f64:	a0 0d       	add	r26, r0
 f66:	61 1d       	adc	r22, r1
 f68:	23 1f       	adc	r18, r19
 f6a:	84 9f       	mul	r24, r20
 f6c:	60 0d       	add	r22, r0
 f6e:	21 1d       	adc	r18, r1
 f70:	82 2f       	mov	r24, r18
 f72:	76 2f       	mov	r23, r22
 f74:	6a 2f       	mov	r22, r26
 f76:	11 24       	eor	r1, r1
 f78:	9f 57       	subi	r25, 0x7F	; 127
 f7a:	50 40       	sbci	r21, 0x00	; 0
 f7c:	9a f0       	brmi	.+38     	; 0xfa4 <__mulsf3_pse+0x88>
 f7e:	f1 f0       	breq	.+60     	; 0xfbc <__mulsf3_pse+0xa0>
 f80:	88 23       	and	r24, r24
 f82:	4a f0       	brmi	.+18     	; 0xf96 <__mulsf3_pse+0x7a>
 f84:	ee 0f       	add	r30, r30
 f86:	ff 1f       	adc	r31, r31
 f88:	bb 1f       	adc	r27, r27
 f8a:	66 1f       	adc	r22, r22
 f8c:	77 1f       	adc	r23, r23
 f8e:	88 1f       	adc	r24, r24
 f90:	91 50       	subi	r25, 0x01	; 1
 f92:	50 40       	sbci	r21, 0x00	; 0
 f94:	a9 f7       	brne	.-22     	; 0xf80 <__mulsf3_pse+0x64>
 f96:	9e 3f       	cpi	r25, 0xFE	; 254
 f98:	51 05       	cpc	r21, r1
 f9a:	80 f0       	brcs	.+32     	; 0xfbc <__mulsf3_pse+0xa0>
 f9c:	0c 94 22 07 	jmp	0xe44	; 0xe44 <__fp_inf>
 fa0:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__fp_szero>
 fa4:	5f 3f       	cpi	r21, 0xFF	; 255
 fa6:	e4 f3       	brlt	.-8      	; 0xfa0 <__mulsf3_pse+0x84>
 fa8:	98 3e       	cpi	r25, 0xE8	; 232
 faa:	d4 f3       	brlt	.-12     	; 0xfa0 <__mulsf3_pse+0x84>
 fac:	86 95       	lsr	r24
 fae:	77 95       	ror	r23
 fb0:	67 95       	ror	r22
 fb2:	b7 95       	ror	r27
 fb4:	f7 95       	ror	r31
 fb6:	e7 95       	ror	r30
 fb8:	9f 5f       	subi	r25, 0xFF	; 255
 fba:	c1 f7       	brne	.-16     	; 0xfac <__mulsf3_pse+0x90>
 fbc:	fe 2b       	or	r31, r30
 fbe:	88 0f       	add	r24, r24
 fc0:	91 1d       	adc	r25, r1
 fc2:	96 95       	lsr	r25
 fc4:	87 95       	ror	r24
 fc6:	97 f9       	bld	r25, 7
 fc8:	08 95       	ret

00000fca <__tablejump2__>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
 fca:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
 fcc:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
 fce:	05 90       	lpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
 fd0:	f4 91       	lpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
 fd2:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
 fd4:	09 94       	ijmp

00000fd6 <_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
 fd6:	f8 94       	cli

00000fd8 <__stop_program>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
 fd8:	ff cf       	rjmp	.-2      	; 0xfd8 <__stop_program>
